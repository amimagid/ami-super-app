/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/inflection";
exports.ids = ["vendor-chunks/inflection"];
exports.modules = {

/***/ "(rsc)/./node_modules/inflection/lib/inflection.js":
/*!***************************************************!*\
  !*** ./node_modules/inflection/lib/inflection.js ***!
  \***************************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * inflection\n * Copyright(c) 2011 Ben Lin <ben@dreamerslab.com>\n * MIT Licensed\n *\n * @fileoverview\n * A port of inflection-js to node.js module.\n */ (function(root, factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n})(this, function() {\n    /**\n   * @description This is a list of nouns that use the same form for both singular and plural.\n   *              This list should remain entirely in lower case to correctly match Strings.\n   * @private\n   */ var uncountable_words = [\n        // 'access',\n        \"accommodation\",\n        \"adulthood\",\n        \"advertising\",\n        \"advice\",\n        \"aggression\",\n        \"aid\",\n        \"air\",\n        \"aircraft\",\n        \"alcohol\",\n        \"anger\",\n        \"applause\",\n        \"arithmetic\",\n        // 'art',\n        \"assistance\",\n        \"athletics\",\n        // 'attention',\n        \"bacon\",\n        \"baggage\",\n        // 'ballet',\n        // 'beauty',\n        \"beef\",\n        // 'beer',\n        // 'behavior',\n        \"biology\",\n        // 'billiards',\n        \"blood\",\n        \"botany\",\n        // 'bowels',\n        \"bread\",\n        // 'business',\n        \"butter\",\n        \"carbon\",\n        \"cardboard\",\n        \"cash\",\n        \"chalk\",\n        \"chaos\",\n        \"chess\",\n        \"crossroads\",\n        \"countryside\",\n        // 'damage',\n        \"dancing\",\n        // 'danger',\n        \"deer\",\n        // 'delight',\n        // 'dessert',\n        \"dignity\",\n        \"dirt\",\n        // 'distribution',\n        \"dust\",\n        \"economics\",\n        \"education\",\n        \"electricity\",\n        // 'employment',\n        // 'energy',\n        \"engineering\",\n        \"enjoyment\",\n        // 'entertainment',\n        \"envy\",\n        \"equipment\",\n        \"ethics\",\n        \"evidence\",\n        \"evolution\",\n        // 'failure',\n        // 'faith',\n        \"fame\",\n        \"fiction\",\n        // 'fish',\n        \"flour\",\n        \"flu\",\n        \"food\",\n        // 'freedom',\n        // 'fruit',\n        \"fuel\",\n        \"fun\",\n        // 'funeral',\n        \"furniture\",\n        \"gallows\",\n        \"garbage\",\n        \"garlic\",\n        // 'gas',\n        \"genetics\",\n        // 'glass',\n        \"gold\",\n        \"golf\",\n        \"gossip\",\n        // 'grass',\n        \"gratitude\",\n        \"grief\",\n        // 'ground',\n        \"guilt\",\n        \"gymnastics\",\n        // 'hair',\n        \"happiness\",\n        \"hardware\",\n        \"harm\",\n        \"hate\",\n        \"hatred\",\n        \"health\",\n        \"heat\",\n        // 'height',\n        \"help\",\n        \"homework\",\n        \"honesty\",\n        \"honey\",\n        \"hospitality\",\n        \"housework\",\n        \"humour\",\n        \"hunger\",\n        \"hydrogen\",\n        \"ice\",\n        \"importance\",\n        \"inflation\",\n        \"information\",\n        // 'injustice',\n        \"innocence\",\n        // 'intelligence',\n        \"iron\",\n        \"irony\",\n        \"jam\",\n        // 'jealousy',\n        // 'jelly',\n        \"jewelry\",\n        // 'joy',\n        \"judo\",\n        // 'juice',\n        // 'justice',\n        \"karate\",\n        // 'kindness',\n        \"knowledge\",\n        // 'labour',\n        \"lack\",\n        // 'land',\n        \"laughter\",\n        \"lava\",\n        \"leather\",\n        \"leisure\",\n        \"lightning\",\n        \"linguine\",\n        \"linguini\",\n        \"linguistics\",\n        \"literature\",\n        \"litter\",\n        \"livestock\",\n        \"logic\",\n        \"loneliness\",\n        // 'love',\n        \"luck\",\n        \"luggage\",\n        \"macaroni\",\n        \"machinery\",\n        \"magic\",\n        // 'mail',\n        \"management\",\n        \"mankind\",\n        \"marble\",\n        \"mathematics\",\n        \"mayonnaise\",\n        \"measles\",\n        // 'meat',\n        // 'metal',\n        \"methane\",\n        \"milk\",\n        \"minus\",\n        \"money\",\n        // 'moose',\n        \"mud\",\n        \"music\",\n        \"mumps\",\n        \"nature\",\n        \"news\",\n        \"nitrogen\",\n        \"nonsense\",\n        \"nurture\",\n        \"nutrition\",\n        \"obedience\",\n        \"obesity\",\n        // 'oil',\n        \"oxygen\",\n        // 'paper',\n        // 'passion',\n        \"pasta\",\n        \"patience\",\n        // 'permission',\n        \"physics\",\n        \"poetry\",\n        \"pollution\",\n        \"poverty\",\n        // 'power',\n        \"pride\",\n        // 'production',\n        // 'progress',\n        // 'pronunciation',\n        \"psychology\",\n        \"publicity\",\n        \"punctuation\",\n        // 'quality',\n        // 'quantity',\n        \"quartz\",\n        \"racism\",\n        // 'rain',\n        // 'recreation',\n        \"relaxation\",\n        \"reliability\",\n        \"research\",\n        \"respect\",\n        \"revenge\",\n        \"rice\",\n        \"rubbish\",\n        \"rum\",\n        \"safety\",\n        // 'salad',\n        // 'salt',\n        // 'sand',\n        // 'satire',\n        \"scenery\",\n        \"seafood\",\n        \"seaside\",\n        \"series\",\n        \"shame\",\n        \"sheep\",\n        \"shopping\",\n        // 'silence',\n        \"sleep\",\n        // 'slang'\n        \"smoke\",\n        \"smoking\",\n        \"snow\",\n        \"soap\",\n        \"software\",\n        \"soil\",\n        // 'sorrow',\n        // 'soup',\n        \"spaghetti\",\n        // 'speed',\n        \"species\",\n        // 'spelling',\n        // 'sport',\n        \"steam\",\n        // 'strength',\n        \"stuff\",\n        \"stupidity\",\n        // 'success',\n        // 'sugar',\n        \"sunshine\",\n        \"symmetry\",\n        // 'tea',\n        \"tennis\",\n        \"thirst\",\n        \"thunder\",\n        \"timber\",\n        // 'time',\n        // 'toast',\n        // 'tolerance',\n        // 'trade',\n        \"traffic\",\n        \"transportation\",\n        // 'travel',\n        \"trust\",\n        // 'understanding',\n        \"underwear\",\n        \"unemployment\",\n        \"unity\",\n        // 'usage',\n        \"validity\",\n        \"veal\",\n        \"vegetation\",\n        \"vegetarianism\",\n        \"vengeance\",\n        \"violence\",\n        // 'vision',\n        \"vitality\",\n        \"warmth\",\n        // 'water',\n        \"wealth\",\n        \"weather\",\n        // 'weight',\n        \"welfare\",\n        \"wheat\",\n        // 'whiskey',\n        // 'width',\n        \"wildlife\",\n        // 'wine',\n        \"wisdom\",\n        // 'wood',\n        // 'wool',\n        // 'work',\n        // 'yeast',\n        \"yoga\",\n        \"zinc\",\n        \"zoology\"\n    ];\n    /**\n   * @description These rules translate from the singular form of a noun to its plural form.\n   * @private\n   */ var regex = {\n        plural: {\n            men: new RegExp(\"^(m|wom)en$\", \"gi\"),\n            people: new RegExp(\"(pe)ople$\", \"gi\"),\n            children: new RegExp(\"(child)ren$\", \"gi\"),\n            tia: new RegExp(\"([ti])a$\", \"gi\"),\n            analyses: new RegExp(\"((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$\", \"gi\"),\n            databases: new RegExp(\"(database)s$\", \"gi\"),\n            drives: new RegExp(\"(drive)s$\", \"gi\"),\n            hives: new RegExp(\"(hi|ti)ves$\", \"gi\"),\n            curves: new RegExp(\"(curve)s$\", \"gi\"),\n            lrves: new RegExp(\"([lr])ves$\", \"gi\"),\n            aves: new RegExp(\"([a])ves$\", \"gi\"),\n            foves: new RegExp(\"([^fo])ves$\", \"gi\"),\n            movies: new RegExp(\"(m)ovies$\", \"gi\"),\n            aeiouyies: new RegExp(\"([^aeiouy]|qu)ies$\", \"gi\"),\n            series: new RegExp(\"(s)eries$\", \"gi\"),\n            xes: new RegExp(\"(x|ch|ss|sh)es$\", \"gi\"),\n            mice: new RegExp(\"([m|l])ice$\", \"gi\"),\n            buses: new RegExp(\"(bus)es$\", \"gi\"),\n            oes: new RegExp(\"(o)es$\", \"gi\"),\n            shoes: new RegExp(\"(shoe)s$\", \"gi\"),\n            crises: new RegExp(\"(cris|ax|test)es$\", \"gi\"),\n            octopuses: new RegExp(\"(octop|vir)uses$\", \"gi\"),\n            aliases: new RegExp(\"(alias|canvas|status|campus)es$\", \"gi\"),\n            summonses: new RegExp(\"^(summons|bonus)es$\", \"gi\"),\n            oxen: new RegExp(\"^(ox)en\", \"gi\"),\n            matrices: new RegExp(\"(matr)ices$\", \"gi\"),\n            vertices: new RegExp(\"(vert|ind)ices$\", \"gi\"),\n            feet: new RegExp(\"^feet$\", \"gi\"),\n            teeth: new RegExp(\"^teeth$\", \"gi\"),\n            geese: new RegExp(\"^geese$\", \"gi\"),\n            quizzes: new RegExp(\"(quiz)zes$\", \"gi\"),\n            whereases: new RegExp(\"^(whereas)es$\", \"gi\"),\n            criteria: new RegExp(\"^(criteri)a$\", \"gi\"),\n            genera: new RegExp(\"^genera$\", \"gi\"),\n            ss: new RegExp(\"ss$\", \"gi\"),\n            s: new RegExp(\"s$\", \"gi\")\n        },\n        singular: {\n            man: new RegExp(\"^(m|wom)an$\", \"gi\"),\n            person: new RegExp(\"(pe)rson$\", \"gi\"),\n            child: new RegExp(\"(child)$\", \"gi\"),\n            drive: new RegExp(\"(drive)$\", \"gi\"),\n            ox: new RegExp(\"^(ox)$\", \"gi\"),\n            axis: new RegExp(\"(ax|test)is$\", \"gi\"),\n            octopus: new RegExp(\"(octop|vir)us$\", \"gi\"),\n            alias: new RegExp(\"(alias|status|canvas|campus)$\", \"gi\"),\n            summons: new RegExp(\"^(summons|bonus)$\", \"gi\"),\n            bus: new RegExp(\"(bu)s$\", \"gi\"),\n            buffalo: new RegExp(\"(buffal|tomat|potat)o$\", \"gi\"),\n            tium: new RegExp(\"([ti])um$\", \"gi\"),\n            sis: new RegExp(\"sis$\", \"gi\"),\n            ffe: new RegExp(\"(?:([^f])fe|([lr])f)$\", \"gi\"),\n            hive: new RegExp(\"(hi|ti)ve$\", \"gi\"),\n            aeiouyy: new RegExp(\"([^aeiouy]|qu)y$\", \"gi\"),\n            x: new RegExp(\"(x|ch|ss|sh)$\", \"gi\"),\n            matrix: new RegExp(\"(matr)ix$\", \"gi\"),\n            vertex: new RegExp(\"(vert|ind)ex$\", \"gi\"),\n            mouse: new RegExp(\"([m|l])ouse$\", \"gi\"),\n            foot: new RegExp(\"^foot$\", \"gi\"),\n            tooth: new RegExp(\"^tooth$\", \"gi\"),\n            goose: new RegExp(\"^goose$\", \"gi\"),\n            quiz: new RegExp(\"(quiz)$\", \"gi\"),\n            whereas: new RegExp(\"^(whereas)$\", \"gi\"),\n            criterion: new RegExp(\"^(criteri)on$\", \"gi\"),\n            genus: new RegExp(\"^genus$\", \"gi\"),\n            s: new RegExp(\"s$\", \"gi\"),\n            common: new RegExp(\"$\", \"gi\")\n        }\n    };\n    var plural_rules = [\n        // do not replace if its already a plural word\n        [\n            regex.plural.men\n        ],\n        [\n            regex.plural.people\n        ],\n        [\n            regex.plural.children\n        ],\n        [\n            regex.plural.tia\n        ],\n        [\n            regex.plural.analyses\n        ],\n        [\n            regex.plural.databases\n        ],\n        [\n            regex.plural.drives\n        ],\n        [\n            regex.plural.hives\n        ],\n        [\n            regex.plural.curves\n        ],\n        [\n            regex.plural.lrves\n        ],\n        [\n            regex.plural.foves\n        ],\n        [\n            regex.plural.aeiouyies\n        ],\n        [\n            regex.plural.series\n        ],\n        [\n            regex.plural.movies\n        ],\n        [\n            regex.plural.xes\n        ],\n        [\n            regex.plural.mice\n        ],\n        [\n            regex.plural.buses\n        ],\n        [\n            regex.plural.oes\n        ],\n        [\n            regex.plural.shoes\n        ],\n        [\n            regex.plural.crises\n        ],\n        [\n            regex.plural.octopuses\n        ],\n        [\n            regex.plural.aliases\n        ],\n        [\n            regex.plural.summonses\n        ],\n        [\n            regex.plural.oxen\n        ],\n        [\n            regex.plural.matrices\n        ],\n        [\n            regex.plural.feet\n        ],\n        [\n            regex.plural.teeth\n        ],\n        [\n            regex.plural.geese\n        ],\n        [\n            regex.plural.quizzes\n        ],\n        [\n            regex.plural.whereases\n        ],\n        [\n            regex.plural.criteria\n        ],\n        [\n            regex.plural.genera\n        ],\n        // original rule\n        [\n            regex.singular.man,\n            \"$1en\"\n        ],\n        [\n            regex.singular.person,\n            \"$1ople\"\n        ],\n        [\n            regex.singular.child,\n            \"$1ren\"\n        ],\n        [\n            regex.singular.drive,\n            \"$1s\"\n        ],\n        [\n            regex.singular.ox,\n            \"$1en\"\n        ],\n        [\n            regex.singular.axis,\n            \"$1es\"\n        ],\n        [\n            regex.singular.octopus,\n            \"$1uses\"\n        ],\n        [\n            regex.singular.alias,\n            \"$1es\"\n        ],\n        [\n            regex.singular.summons,\n            \"$1es\"\n        ],\n        [\n            regex.singular.bus,\n            \"$1ses\"\n        ],\n        [\n            regex.singular.buffalo,\n            \"$1oes\"\n        ],\n        [\n            regex.singular.tium,\n            \"$1a\"\n        ],\n        [\n            regex.singular.sis,\n            \"ses\"\n        ],\n        [\n            regex.singular.ffe,\n            \"$1$2ves\"\n        ],\n        [\n            regex.singular.hive,\n            \"$1ves\"\n        ],\n        [\n            regex.singular.aeiouyy,\n            \"$1ies\"\n        ],\n        [\n            regex.singular.matrix,\n            \"$1ices\"\n        ],\n        [\n            regex.singular.vertex,\n            \"$1ices\"\n        ],\n        [\n            regex.singular.x,\n            \"$1es\"\n        ],\n        [\n            regex.singular.mouse,\n            \"$1ice\"\n        ],\n        [\n            regex.singular.foot,\n            \"feet\"\n        ],\n        [\n            regex.singular.tooth,\n            \"teeth\"\n        ],\n        [\n            regex.singular.goose,\n            \"geese\"\n        ],\n        [\n            regex.singular.quiz,\n            \"$1zes\"\n        ],\n        [\n            regex.singular.whereas,\n            \"$1es\"\n        ],\n        [\n            regex.singular.criterion,\n            \"$1a\"\n        ],\n        [\n            regex.singular.genus,\n            \"genera\"\n        ],\n        [\n            regex.singular.s,\n            \"s\"\n        ],\n        [\n            regex.singular.common,\n            \"s\"\n        ]\n    ];\n    /**\n   * @description These rules translate from the plural form of a noun to its singular form.\n   * @private\n   */ var singular_rules = [\n        // do not replace if its already a singular word\n        [\n            regex.singular.man\n        ],\n        [\n            regex.singular.person\n        ],\n        [\n            regex.singular.child\n        ],\n        [\n            regex.singular.drive\n        ],\n        [\n            regex.singular.ox\n        ],\n        [\n            regex.singular.axis\n        ],\n        [\n            regex.singular.octopus\n        ],\n        [\n            regex.singular.alias\n        ],\n        [\n            regex.singular.summons\n        ],\n        [\n            regex.singular.bus\n        ],\n        [\n            regex.singular.buffalo\n        ],\n        [\n            regex.singular.tium\n        ],\n        [\n            regex.singular.sis\n        ],\n        [\n            regex.singular.ffe\n        ],\n        [\n            regex.singular.hive\n        ],\n        [\n            regex.singular.aeiouyy\n        ],\n        [\n            regex.singular.x\n        ],\n        [\n            regex.singular.matrix\n        ],\n        [\n            regex.singular.mouse\n        ],\n        [\n            regex.singular.foot\n        ],\n        [\n            regex.singular.tooth\n        ],\n        [\n            regex.singular.goose\n        ],\n        [\n            regex.singular.quiz\n        ],\n        [\n            regex.singular.whereas\n        ],\n        [\n            regex.singular.criterion\n        ],\n        [\n            regex.singular.genus\n        ],\n        // original rule\n        [\n            regex.plural.men,\n            \"$1an\"\n        ],\n        [\n            regex.plural.people,\n            \"$1rson\"\n        ],\n        [\n            regex.plural.children,\n            \"$1\"\n        ],\n        [\n            regex.plural.databases,\n            \"$1\"\n        ],\n        [\n            regex.plural.drives,\n            \"$1\"\n        ],\n        [\n            regex.plural.genera,\n            \"genus\"\n        ],\n        [\n            regex.plural.criteria,\n            \"$1on\"\n        ],\n        [\n            regex.plural.tia,\n            \"$1um\"\n        ],\n        [\n            regex.plural.analyses,\n            \"$1$2sis\"\n        ],\n        [\n            regex.plural.hives,\n            \"$1ve\"\n        ],\n        [\n            regex.plural.curves,\n            \"$1\"\n        ],\n        [\n            regex.plural.lrves,\n            \"$1f\"\n        ],\n        [\n            regex.plural.aves,\n            \"$1ve\"\n        ],\n        [\n            regex.plural.foves,\n            \"$1fe\"\n        ],\n        [\n            regex.plural.movies,\n            \"$1ovie\"\n        ],\n        [\n            regex.plural.aeiouyies,\n            \"$1y\"\n        ],\n        [\n            regex.plural.series,\n            \"$1eries\"\n        ],\n        [\n            regex.plural.xes,\n            \"$1\"\n        ],\n        [\n            regex.plural.mice,\n            \"$1ouse\"\n        ],\n        [\n            regex.plural.buses,\n            \"$1\"\n        ],\n        [\n            regex.plural.oes,\n            \"$1\"\n        ],\n        [\n            regex.plural.shoes,\n            \"$1\"\n        ],\n        [\n            regex.plural.crises,\n            \"$1is\"\n        ],\n        [\n            regex.plural.octopuses,\n            \"$1us\"\n        ],\n        [\n            regex.plural.aliases,\n            \"$1\"\n        ],\n        [\n            regex.plural.summonses,\n            \"$1\"\n        ],\n        [\n            regex.plural.oxen,\n            \"$1\"\n        ],\n        [\n            regex.plural.matrices,\n            \"$1ix\"\n        ],\n        [\n            regex.plural.vertices,\n            \"$1ex\"\n        ],\n        [\n            regex.plural.feet,\n            \"foot\"\n        ],\n        [\n            regex.plural.teeth,\n            \"tooth\"\n        ],\n        [\n            regex.plural.geese,\n            \"goose\"\n        ],\n        [\n            regex.plural.quizzes,\n            \"$1\"\n        ],\n        [\n            regex.plural.whereases,\n            \"$1\"\n        ],\n        [\n            regex.plural.ss,\n            \"ss\"\n        ],\n        [\n            regex.plural.s,\n            \"\"\n        ]\n    ];\n    /**\n   * @description This is a list of words that should not be capitalized for title case.\n   * @private\n   */ var non_titlecased_words = [\n        \"and\",\n        \"or\",\n        \"nor\",\n        \"a\",\n        \"an\",\n        \"the\",\n        \"so\",\n        \"but\",\n        \"to\",\n        \"of\",\n        \"at\",\n        \"by\",\n        \"from\",\n        \"into\",\n        \"on\",\n        \"onto\",\n        \"off\",\n        \"out\",\n        \"in\",\n        \"over\",\n        \"with\",\n        \"for\"\n    ];\n    /**\n   * @description These are regular expressions used for converting between String formats.\n   * @private\n   */ var id_suffix = new RegExp(\"(_ids|_id)$\", \"g\");\n    var underbar = new RegExp(\"_\", \"g\");\n    var space_or_underbar = new RegExp(\"[ _]\", \"g\");\n    var uppercase = new RegExp(\"([A-Z])\", \"g\");\n    var underbar_prefix = new RegExp(\"^_\");\n    var inflector = {\n        /**\n   * A helper method that applies rules based replacement to a String.\n   * @private\n   * @function\n   * @param {String} str String to modify and return based on the passed rules.\n   * @param {Array: [RegExp, String]} rules Regexp to match paired with String to use for replacement\n   * @param {Array: [String]} skip Strings to skip if they match\n   * @param {String} override String to return as though this method succeeded (used to conform to APIs)\n   * @returns {String} Return passed String modified by passed rules.\n   * @example\n   *\n   *     this._apply_rules( 'cows', singular_rules ); // === 'cow'\n   */ _apply_rules: function(str, rules, skip, override) {\n            if (override) {\n                str = override;\n            } else {\n                var ignore = inflector.indexOf(skip, str.toLowerCase()) > -1;\n                if (!ignore) {\n                    var i = 0;\n                    var j = rules.length;\n                    for(; i < j; i++){\n                        if (str.match(rules[i][0])) {\n                            if (rules[i][1] !== undefined) {\n                                str = str.replace(rules[i][0], rules[i][1]);\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n            return str;\n        },\n        /**\n   * This lets us detect if an Array contains a given element.\n   * @public\n   * @function\n   * @param {Array} arr The subject array.\n   * @param {Object} item Object to locate in the Array.\n   * @param {Number} from_index Starts checking from this position in the Array.(optional)\n   * @param {Function} compare_func Function used to compare Array item vs passed item.(optional)\n   * @returns {Number} Return index position in the Array of the passed item.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.indexOf([ 'hi','there' ], 'guys' ); // === -1\n   *     inflection.indexOf([ 'hi','there' ], 'hi' ); // === 0\n   */ indexOf: function(arr, item, from_index, compare_func) {\n            if (!from_index) {\n                from_index = -1;\n            }\n            var index = -1;\n            var i = from_index;\n            var j = arr.length;\n            for(; i < j; i++){\n                if (arr[i] === item || compare_func && compare_func(arr[i], item)) {\n                    index = i;\n                    break;\n                }\n            }\n            return index;\n        },\n        /**\n   * This function adds pluralization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {String} plural Overrides normal output with said String.(optional)\n   * @returns {String} Singular English language nouns are returned in plural form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.pluralize( 'person' ); // === 'people'\n   *     inflection.pluralize( 'octopus' ); // === 'octopuses'\n   *     inflection.pluralize( 'Hat' ); // === 'Hats'\n   *     inflection.pluralize( 'person', 'guys' ); // === 'guys'\n   */ pluralize: function(str, plural) {\n            return inflector._apply_rules(str, plural_rules, uncountable_words, plural);\n        },\n        /**\n   * This function adds singularization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {String} singular Overrides normal output with said String.(optional)\n   * @returns {String} Plural English language nouns are returned in singular form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.singularize( 'people' ); // === 'person'\n   *     inflection.singularize( 'octopuses' ); // === 'octopus'\n   *     inflection.singularize( 'Hats' ); // === 'Hat'\n   *     inflection.singularize( 'guys', 'person' ); // === 'person'\n   */ singularize: function(str, singular) {\n            return inflector._apply_rules(str, singular_rules, uncountable_words, singular);\n        },\n        /**\n   * This function will pluralize or singularlize a String appropriately based on a number value\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Number} count The number to base pluralization off of.\n   * @param {String} singular Overrides normal output with said String.(optional)\n   * @param {String} plural Overrides normal output with said String.(optional)\n   * @returns {String} English language nouns are returned in the plural or singular form based on the count.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.inflect( 'people' 1 ); // === 'person'\n   *     inflection.inflect( 'octopuses' 1 ); // === 'octopus'\n   *     inflection.inflect( 'Hats' 1 ); // === 'Hat'\n   *     inflection.inflect( 'guys', 1 , 'person' ); // === 'person'\n   *     inflection.inflect( 'inches', 1.5 ); // === 'inches'\n   *     inflection.inflect( 'person', 2 ); // === 'people'\n   *     inflection.inflect( 'octopus', 2 ); // === 'octopuses'\n   *     inflection.inflect( 'Hat', 2 ); // === 'Hats'\n   *     inflection.inflect( 'person', 2, null, 'guys' ); // === 'guys'\n   */ inflect: function(str, count, singular, plural) {\n            count = parseFloat(count, 10);\n            if (isNaN(count)) return str;\n            if (count === 1) {\n                return inflector._apply_rules(str, singular_rules, uncountable_words, singular);\n            } else {\n                return inflector._apply_rules(str, plural_rules, uncountable_words, plural);\n            }\n        },\n        /**\n   * This function adds camelization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)\n   *                                 Passing true will lowercase it.\n   * @returns {String} Lower case underscored words will be returned in camel case.\n   *                  additionally '/' is translated to '::'\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.camelize( 'message_properties' ); // === 'MessageProperties'\n   *     inflection.camelize( 'message_properties', true ); // === 'messageProperties'\n   */ camelize: function(str, low_first_letter) {\n            var str_path = str.split(\"/\");\n            var i = 0;\n            var j = str_path.length;\n            var str_arr, init_x, k, l, first;\n            for(; i < j; i++){\n                str_arr = str_path[i].split(\"_\");\n                k = 0;\n                l = str_arr.length;\n                for(; k < l; k++){\n                    if (k !== 0) {\n                        str_arr[k] = str_arr[k].toLowerCase();\n                    }\n                    first = str_arr[k].charAt(0);\n                    first = low_first_letter && i === 0 && k === 0 ? first.toLowerCase() : first.toUpperCase();\n                    str_arr[k] = first + str_arr[k].substring(1);\n                }\n                str_path[i] = str_arr.join(\"\");\n            }\n            return str_path.join(\"::\");\n        },\n        /**\n   * This function adds underscore support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} all_upper_case Default is to lowercase and add underscore prefix.(optional)\n   *                  Passing true will return as entered.\n   * @returns {String} Camel cased words are returned as lower cased and underscored.\n   *                  additionally '::' is translated to '/'.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.underscore( 'MessageProperties' ); // === 'message_properties'\n   *     inflection.underscore( 'messageProperties' ); // === 'message_properties'\n   *     inflection.underscore( 'MP', true ); // === 'MP'\n   */ underscore: function(str, all_upper_case) {\n            if (all_upper_case && str === str.toUpperCase()) return str;\n            var str_path = str.split(\"::\");\n            var i = 0;\n            var j = str_path.length;\n            for(; i < j; i++){\n                str_path[i] = str_path[i].replace(uppercase, \"_$1\");\n                str_path[i] = str_path[i].replace(underbar_prefix, \"\");\n            }\n            return str_path.join(\"/\").toLowerCase();\n        },\n        /**\n   * This function adds humanize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)\n   *                                 Passing true will lowercase it.\n   * @returns {String} Lower case underscored words will be returned in humanized form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.humanize( 'message_properties' ); // === 'Message properties'\n   *     inflection.humanize( 'message_properties', true ); // === 'message properties'\n   */ humanize: function(str, low_first_letter) {\n            str = str.toLowerCase();\n            str = str.replace(id_suffix, \"\");\n            str = str.replace(underbar, \" \");\n            if (!low_first_letter) {\n                str = inflector.capitalize(str);\n            }\n            return str;\n        },\n        /**\n   * This function adds capitalization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} All characters will be lower case and the first will be upper.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.capitalize( 'message_properties' ); // === 'Message_properties'\n   *     inflection.capitalize( 'message properties', true ); // === 'Message properties'\n   */ capitalize: function(str) {\n            str = str.toLowerCase();\n            return str.substring(0, 1).toUpperCase() + str.substring(1);\n        },\n        /**\n   * This function replaces underscores with dashes in the string.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Replaces all spaces or underscores with dashes.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.dasherize( 'message_properties' ); // === 'message-properties'\n   *     inflection.dasherize( 'Message Properties' ); // === 'Message-Properties'\n   */ dasherize: function(str) {\n            return str.replace(space_or_underbar, \"-\");\n        },\n        /**\n   * This function adds titleize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Capitalizes words as you would for a book title.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.titleize( 'message_properties' ); // === 'Message Properties'\n   *     inflection.titleize( 'message properties to keep' ); // === 'Message Properties to Keep'\n   */ titleize: function(str) {\n            str = str.toLowerCase().replace(underbar, \" \");\n            var str_arr = str.split(\" \");\n            var i = 0;\n            var j = str_arr.length;\n            var d, k, l;\n            for(; i < j; i++){\n                d = str_arr[i].split(\"-\");\n                k = 0;\n                l = d.length;\n                for(; k < l; k++){\n                    if (inflector.indexOf(non_titlecased_words, d[k].toLowerCase()) < 0) {\n                        d[k] = inflector.capitalize(d[k]);\n                    }\n                }\n                str_arr[i] = d.join(\"-\");\n            }\n            str = str_arr.join(\" \");\n            str = str.substring(0, 1).toUpperCase() + str.substring(1);\n            return str;\n        },\n        /**\n   * This function adds demodulize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Removes module names leaving only class names.(Ruby style)\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.demodulize( 'Message::Bus::Properties' ); // === 'Properties'\n   */ demodulize: function(str) {\n            var str_arr = str.split(\"::\");\n            return str_arr[str_arr.length - 1];\n        },\n        /**\n   * This function adds tableize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Return camel cased words into their underscored plural form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.tableize( 'MessageBusProperty' ); // === 'message_bus_properties'\n   */ tableize: function(str) {\n            str = inflector.underscore(str);\n            str = inflector.pluralize(str);\n            return str;\n        },\n        /**\n   * This function adds classification support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Underscored plural nouns become the camel cased singular form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.classify( 'message_bus_properties' ); // === 'MessageBusProperty'\n   */ classify: function(str) {\n            str = inflector.camelize(str);\n            str = inflector.singularize(str);\n            return str;\n        },\n        /**\n   * This function adds foreign key support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} drop_id_ubar Default is to seperate id with an underbar at the end of the class name,\n                                 you can pass true to skip it.(optional)\n   * @returns {String} Underscored plural nouns become the camel cased singular form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.foreign_key( 'MessageBusProperty' ); // === 'message_bus_property_id'\n   *     inflection.foreign_key( 'MessageBusProperty', true ); // === 'message_bus_propertyid'\n   */ foreign_key: function(str, drop_id_ubar) {\n            str = inflector.demodulize(str);\n            str = inflector.underscore(str) + (drop_id_ubar ? \"\" : \"_\") + \"id\";\n            return str;\n        },\n        /**\n   * This function adds ordinalize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Return all found numbers their sequence like '22nd'.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.ordinalize( 'the 1 pitch' ); // === 'the 1st pitch'\n   */ ordinalize: function(str) {\n            var str_arr = str.split(\" \");\n            var i = 0;\n            var j = str_arr.length;\n            for(; i < j; i++){\n                var k = parseInt(str_arr[i], 10);\n                if (!isNaN(k)) {\n                    var ltd = str_arr[i].substring(str_arr[i].length - 2);\n                    var ld = str_arr[i].substring(str_arr[i].length - 1);\n                    var suf = \"th\";\n                    if (ltd != \"11\" && ltd != \"12\" && ltd != \"13\") {\n                        if (ld === \"1\") {\n                            suf = \"st\";\n                        } else if (ld === \"2\") {\n                            suf = \"nd\";\n                        } else if (ld === \"3\") {\n                            suf = \"rd\";\n                        }\n                    }\n                    str_arr[i] += suf;\n                }\n            }\n            return str_arr.join(\" \");\n        },\n        /**\n   * This function performs multiple inflection methods on a string\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Array} arr An array of inflection methods.\n   * @returns {String}\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.transform( 'all job', [ 'pluralize', 'capitalize', 'dasherize' ]); // === 'All-jobs'\n   */ transform: function(str, arr) {\n            var i = 0;\n            var j = arr.length;\n            for(; i < j; i++){\n                var method = arr[i];\n                if (inflector.hasOwnProperty(method)) {\n                    str = inflector[method](str);\n                }\n            }\n            return str;\n        }\n    };\n    /**\n * @public\n */ inflector.version = \"1.13.1\";\n    return inflector;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inflection/lib/inflection.js\n");

/***/ })

};
;