"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pg-connection-string";
exports.ids = ["vendor-chunks/pg-connection-string"];
exports.modules = {

/***/ "(rsc)/./node_modules/pg-connection-string/index.js":
/*!****************************************************!*\
  !*** ./node_modules/pg-connection-string/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n//Parse method copied from https://github.com/brianc/node-postgres\n//Copyright (c) 2010-2014 Brian Carlson (brian.m.carlson@gmail.com)\n//MIT License\n//parses a connection string\nfunction parse(str, options = {}) {\n    //unix socket\n    if (str.charAt(0) === \"/\") {\n        const config = str.split(\" \");\n        return {\n            host: config[0],\n            database: config[1]\n        };\n    }\n    // Check for empty host in URL\n    const config = {};\n    let result;\n    let dummyHost = false;\n    if (/ |%[^a-f0-9]|%[a-f0-9][^a-f0-9]/i.test(str)) {\n        // Ensure spaces are encoded as %20\n        str = encodeURI(str).replace(/%25(\\d\\d)/g, \"%$1\");\n    }\n    try {\n        try {\n            result = new URL(str, \"postgres://base\");\n        } catch (e) {\n            // The URL is invalid so try again with a dummy host\n            result = new URL(str.replace(\"@/\", \"@___DUMMY___/\"), \"postgres://base\");\n            dummyHost = true;\n        }\n    } catch (err) {\n        // Remove the input from the error message to avoid leaking sensitive information\n        err.input && (err.input = \"*****REDACTED*****\");\n    }\n    // We'd like to use Object.fromEntries() here but Node.js 10 does not support it\n    for (const entry of result.searchParams.entries()){\n        config[entry[0]] = entry[1];\n    }\n    config.user = config.user || decodeURIComponent(result.username);\n    config.password = config.password || decodeURIComponent(result.password);\n    if (result.protocol == \"socket:\") {\n        config.host = decodeURI(result.pathname);\n        config.database = result.searchParams.get(\"db\");\n        config.client_encoding = result.searchParams.get(\"encoding\");\n        return config;\n    }\n    const hostname = dummyHost ? \"\" : result.hostname;\n    if (!config.host) {\n        // Only set the host if there is no equivalent query param.\n        config.host = decodeURIComponent(hostname);\n    } else if (hostname && /^%2f/i.test(hostname)) {\n        // Only prepend the hostname to the pathname if it is not a URL encoded Unix socket host.\n        result.pathname = hostname + result.pathname;\n    }\n    if (!config.port) {\n        // Only set the port if there is no equivalent query param.\n        config.port = result.port;\n    }\n    const pathname = result.pathname.slice(1) || null;\n    config.database = pathname ? decodeURI(pathname) : null;\n    if (config.ssl === \"true\" || config.ssl === \"1\") {\n        config.ssl = true;\n    }\n    if (config.ssl === \"0\") {\n        config.ssl = false;\n    }\n    if (config.sslcert || config.sslkey || config.sslrootcert || config.sslmode) {\n        config.ssl = {};\n    }\n    // Only try to load fs if we expect to read from the disk\n    const fs = config.sslcert || config.sslkey || config.sslrootcert ? __webpack_require__(/*! fs */ \"fs\") : null;\n    if (config.sslcert) {\n        config.ssl.cert = fs.readFileSync(config.sslcert).toString();\n    }\n    if (config.sslkey) {\n        config.ssl.key = fs.readFileSync(config.sslkey).toString();\n    }\n    if (config.sslrootcert) {\n        config.ssl.ca = fs.readFileSync(config.sslrootcert).toString();\n    }\n    if (options.useLibpqCompat && config.uselibpqcompat) {\n        throw new Error(\"Both useLibpqCompat and uselibpqcompat are set. Please use only one of them.\");\n    }\n    if (config.uselibpqcompat === \"true\" || options.useLibpqCompat) {\n        switch(config.sslmode){\n            case \"disable\":\n                {\n                    config.ssl = false;\n                    break;\n                }\n            case \"prefer\":\n                {\n                    config.ssl.rejectUnauthorized = false;\n                    break;\n                }\n            case \"require\":\n                {\n                    if (config.sslrootcert) {\n                        // If a root CA is specified, behavior of `sslmode=require` will be the same as that of `verify-ca`\n                        config.ssl.checkServerIdentity = function() {};\n                    } else {\n                        config.ssl.rejectUnauthorized = false;\n                    }\n                    break;\n                }\n            case \"verify-ca\":\n                {\n                    if (!config.ssl.ca) {\n                        throw new Error(\"SECURITY WARNING: Using sslmode=verify-ca requires specifying a CA with sslrootcert. If a public CA is used, verify-ca allows connections to a server that somebody else may have registered with the CA, making you vulnerable to Man-in-the-Middle attacks. Either specify a custom CA certificate with sslrootcert parameter or use sslmode=verify-full for proper security.\");\n                    }\n                    config.ssl.checkServerIdentity = function() {};\n                    break;\n                }\n            case \"verify-full\":\n                {\n                    break;\n                }\n        }\n    } else {\n        switch(config.sslmode){\n            case \"disable\":\n                {\n                    config.ssl = false;\n                    break;\n                }\n            case \"prefer\":\n            case \"require\":\n            case \"verify-ca\":\n            case \"verify-full\":\n                {\n                    break;\n                }\n            case \"no-verify\":\n                {\n                    config.ssl.rejectUnauthorized = false;\n                    break;\n                }\n        }\n    }\n    return config;\n}\n// convert pg-connection-string ssl config to a ClientConfig.ConnectionOptions\nfunction toConnectionOptions(sslConfig) {\n    const connectionOptions = Object.entries(sslConfig).reduce((c, [key, value])=>{\n        // we explicitly check for undefined and null instead of `if (value)` because some\n        // options accept falsy values. Example: `ssl.rejectUnauthorized = false`\n        if (value !== undefined && value !== null) {\n            c[key] = value;\n        }\n        return c;\n    }, {});\n    return connectionOptions;\n}\n// convert pg-connection-string config to a ClientConfig\nfunction toClientConfig(config) {\n    const poolConfig = Object.entries(config).reduce((c, [key, value])=>{\n        if (key === \"ssl\") {\n            const sslConfig = value;\n            if (typeof sslConfig === \"boolean\") {\n                c[key] = sslConfig;\n            }\n            if (typeof sslConfig === \"object\") {\n                c[key] = toConnectionOptions(sslConfig);\n            }\n        } else if (value !== undefined && value !== null) {\n            if (key === \"port\") {\n                // when port is not specified, it is converted into an empty string\n                // we want to avoid NaN or empty string as a values in ClientConfig\n                if (value !== \"\") {\n                    const v = parseInt(value, 10);\n                    if (isNaN(v)) {\n                        throw new Error(`Invalid ${key}: ${value}`);\n                    }\n                    c[key] = v;\n                }\n            } else {\n                c[key] = value;\n            }\n        }\n        return c;\n    }, {});\n    return poolConfig;\n}\n// parses a connection string into ClientConfig\nfunction parseIntoClientConfig(str) {\n    return toClientConfig(parse(str));\n}\nmodule.exports = parse;\nparse.parse = parse;\nparse.toClientConfig = toClientConfig;\nparse.parseIntoClientConfig = parseIntoClientConfig;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-connection-string/index.js\n");

/***/ })

};
;