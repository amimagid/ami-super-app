/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/wkx";
exports.ids = ["vendor-chunks/wkx"];
exports.modules = {

/***/ "(rsc)/./node_modules/wkx/lib/binaryreader.js":
/*!**********************************************!*\
  !*** ./node_modules/wkx/lib/binaryreader.js ***!
  \**********************************************/
/***/ ((module) => {

eval("module.exports = BinaryReader;\nfunction BinaryReader(buffer, isBigEndian) {\n    this.buffer = buffer;\n    this.position = 0;\n    this.isBigEndian = isBigEndian || false;\n}\nfunction _read(readLE, readBE, size) {\n    return function() {\n        var value;\n        if (this.isBigEndian) value = readBE.call(this.buffer, this.position);\n        else value = readLE.call(this.buffer, this.position);\n        this.position += size;\n        return value;\n    };\n}\nBinaryReader.prototype.readUInt8 = _read(Buffer.prototype.readUInt8, Buffer.prototype.readUInt8, 1);\nBinaryReader.prototype.readUInt16 = _read(Buffer.prototype.readUInt16LE, Buffer.prototype.readUInt16BE, 2);\nBinaryReader.prototype.readUInt32 = _read(Buffer.prototype.readUInt32LE, Buffer.prototype.readUInt32BE, 4);\nBinaryReader.prototype.readInt8 = _read(Buffer.prototype.readInt8, Buffer.prototype.readInt8, 1);\nBinaryReader.prototype.readInt16 = _read(Buffer.prototype.readInt16LE, Buffer.prototype.readInt16BE, 2);\nBinaryReader.prototype.readInt32 = _read(Buffer.prototype.readInt32LE, Buffer.prototype.readInt32BE, 4);\nBinaryReader.prototype.readFloat = _read(Buffer.prototype.readFloatLE, Buffer.prototype.readFloatBE, 4);\nBinaryReader.prototype.readDouble = _read(Buffer.prototype.readDoubleLE, Buffer.prototype.readDoubleBE, 8);\nBinaryReader.prototype.readVarInt = function() {\n    var nextByte, result = 0, bytesRead = 0;\n    do {\n        nextByte = this.buffer[this.position + bytesRead];\n        result += (nextByte & 0x7F) << 7 * bytesRead;\n        bytesRead++;\n    }while (nextByte >= 0x80);\n    this.position += bytesRead;\n    return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbWktc3VwZXItYXBwLy4vbm9kZV9tb2R1bGVzL3dreC9saWIvYmluYXJ5cmVhZGVyLmpzP2FlNmUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBCaW5hcnlSZWFkZXI7XHJcblxyXG5mdW5jdGlvbiBCaW5hcnlSZWFkZXIoYnVmZmVyLCBpc0JpZ0VuZGlhbikge1xyXG4gICAgdGhpcy5idWZmZXIgPSBidWZmZXI7XHJcbiAgICB0aGlzLnBvc2l0aW9uID0gMDtcclxuICAgIHRoaXMuaXNCaWdFbmRpYW4gPSBpc0JpZ0VuZGlhbiB8fCBmYWxzZTtcclxufVxyXG5cclxuZnVuY3Rpb24gX3JlYWQocmVhZExFLCByZWFkQkUsIHNpemUpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHZhbHVlO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5pc0JpZ0VuZGlhbilcclxuICAgICAgICAgICAgdmFsdWUgPSByZWFkQkUuY2FsbCh0aGlzLmJ1ZmZlciwgdGhpcy5wb3NpdGlvbik7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB2YWx1ZSA9IHJlYWRMRS5jYWxsKHRoaXMuYnVmZmVyLCB0aGlzLnBvc2l0aW9uKTtcclxuXHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiArPSBzaXplO1xyXG5cclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9O1xyXG59XHJcblxyXG5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IF9yZWFkKEJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4LCBCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCwgMSk7XHJcbkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFVJbnQxNiA9IF9yZWFkKEJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFLCBCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSwgMik7XHJcbkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFVJbnQzMiA9IF9yZWFkKEJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFLCBCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSwgNCk7XHJcbkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZEludDggPSBfcmVhZChCdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4LCBCdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4LCAxKTtcclxuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkSW50MTYgPSBfcmVhZChCdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFLCBCdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFLCAyKTtcclxuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkSW50MzIgPSBfcmVhZChCdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFLCBCdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFLCA0KTtcclxuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkRmxvYXQgPSBfcmVhZChCdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFLCBCdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFLCA0KTtcclxuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkRG91YmxlID0gX3JlYWQoQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUsIEJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFLCA4KTtcclxuXHJcbkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFZhckludCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBuZXh0Qnl0ZSxcclxuICAgICAgICByZXN1bHQgPSAwLFxyXG4gICAgICAgIGJ5dGVzUmVhZCA9IDA7XHJcblxyXG4gICAgZG8ge1xyXG4gICAgICAgIG5leHRCeXRlID0gdGhpcy5idWZmZXJbdGhpcy5wb3NpdGlvbiArIGJ5dGVzUmVhZF07XHJcbiAgICAgICAgcmVzdWx0ICs9IChuZXh0Qnl0ZSAmIDB4N0YpIDw8ICg3ICogYnl0ZXNSZWFkKTtcclxuICAgICAgICBieXRlc1JlYWQrKztcclxuICAgIH0gd2hpbGUgKG5leHRCeXRlID49IDB4ODApO1xyXG5cclxuICAgIHRoaXMucG9zaXRpb24gKz0gYnl0ZXNSZWFkO1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn07XHJcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiQmluYXJ5UmVhZGVyIiwiYnVmZmVyIiwiaXNCaWdFbmRpYW4iLCJwb3NpdGlvbiIsIl9yZWFkIiwicmVhZExFIiwicmVhZEJFIiwic2l6ZSIsInZhbHVlIiwiY2FsbCIsInByb3RvdHlwZSIsInJlYWRVSW50OCIsIkJ1ZmZlciIsInJlYWRVSW50MTYiLCJyZWFkVUludDE2TEUiLCJyZWFkVUludDE2QkUiLCJyZWFkVUludDMyIiwicmVhZFVJbnQzMkxFIiwicmVhZFVJbnQzMkJFIiwicmVhZEludDgiLCJyZWFkSW50MTYiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRGbG9hdCIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwicmVhZFZhckludCIsIm5leHRCeXRlIiwicmVzdWx0IiwiYnl0ZXNSZWFkIl0sIm1hcHBpbmdzIjoiQUFBQUEsT0FBT0MsT0FBTyxHQUFHQztBQUVqQixTQUFTQSxhQUFhQyxNQUFNLEVBQUVDLFdBQVc7SUFDckMsSUFBSSxDQUFDRCxNQUFNLEdBQUdBO0lBQ2QsSUFBSSxDQUFDRSxRQUFRLEdBQUc7SUFDaEIsSUFBSSxDQUFDRCxXQUFXLEdBQUdBLGVBQWU7QUFDdEM7QUFFQSxTQUFTRSxNQUFNQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsSUFBSTtJQUMvQixPQUFPO1FBQ0gsSUFBSUM7UUFFSixJQUFJLElBQUksQ0FBQ04sV0FBVyxFQUNoQk0sUUFBUUYsT0FBT0csSUFBSSxDQUFDLElBQUksQ0FBQ1IsTUFBTSxFQUFFLElBQUksQ0FBQ0UsUUFBUTthQUU5Q0ssUUFBUUgsT0FBT0ksSUFBSSxDQUFDLElBQUksQ0FBQ1IsTUFBTSxFQUFFLElBQUksQ0FBQ0UsUUFBUTtRQUVsRCxJQUFJLENBQUNBLFFBQVEsSUFBSUk7UUFFakIsT0FBT0M7SUFDWDtBQUNKO0FBRUFSLGFBQWFVLFNBQVMsQ0FBQ0MsU0FBUyxHQUFHUCxNQUFNUSxPQUFPRixTQUFTLENBQUNDLFNBQVMsRUFBRUMsT0FBT0YsU0FBUyxDQUFDQyxTQUFTLEVBQUU7QUFDakdYLGFBQWFVLFNBQVMsQ0FBQ0csVUFBVSxHQUFHVCxNQUFNUSxPQUFPRixTQUFTLENBQUNJLFlBQVksRUFBRUYsT0FBT0YsU0FBUyxDQUFDSyxZQUFZLEVBQUU7QUFDeEdmLGFBQWFVLFNBQVMsQ0FBQ00sVUFBVSxHQUFHWixNQUFNUSxPQUFPRixTQUFTLENBQUNPLFlBQVksRUFBRUwsT0FBT0YsU0FBUyxDQUFDUSxZQUFZLEVBQUU7QUFDeEdsQixhQUFhVSxTQUFTLENBQUNTLFFBQVEsR0FBR2YsTUFBTVEsT0FBT0YsU0FBUyxDQUFDUyxRQUFRLEVBQUVQLE9BQU9GLFNBQVMsQ0FBQ1MsUUFBUSxFQUFFO0FBQzlGbkIsYUFBYVUsU0FBUyxDQUFDVSxTQUFTLEdBQUdoQixNQUFNUSxPQUFPRixTQUFTLENBQUNXLFdBQVcsRUFBRVQsT0FBT0YsU0FBUyxDQUFDWSxXQUFXLEVBQUU7QUFDckd0QixhQUFhVSxTQUFTLENBQUNhLFNBQVMsR0FBR25CLE1BQU1RLE9BQU9GLFNBQVMsQ0FBQ2MsV0FBVyxFQUFFWixPQUFPRixTQUFTLENBQUNlLFdBQVcsRUFBRTtBQUNyR3pCLGFBQWFVLFNBQVMsQ0FBQ2dCLFNBQVMsR0FBR3RCLE1BQU1RLE9BQU9GLFNBQVMsQ0FBQ2lCLFdBQVcsRUFBRWYsT0FBT0YsU0FBUyxDQUFDa0IsV0FBVyxFQUFFO0FBQ3JHNUIsYUFBYVUsU0FBUyxDQUFDbUIsVUFBVSxHQUFHekIsTUFBTVEsT0FBT0YsU0FBUyxDQUFDb0IsWUFBWSxFQUFFbEIsT0FBT0YsU0FBUyxDQUFDcUIsWUFBWSxFQUFFO0FBRXhHL0IsYUFBYVUsU0FBUyxDQUFDc0IsVUFBVSxHQUFHO0lBQ2hDLElBQUlDLFVBQ0FDLFNBQVMsR0FDVEMsWUFBWTtJQUVoQixHQUFHO1FBQ0NGLFdBQVcsSUFBSSxDQUFDaEMsTUFBTSxDQUFDLElBQUksQ0FBQ0UsUUFBUSxHQUFHZ0MsVUFBVTtRQUNqREQsVUFBVSxBQUFDRCxDQUFBQSxXQUFXLElBQUcsS0FBTyxJQUFJRTtRQUNwQ0E7SUFDSixRQUFTRixZQUFZLE1BQU07SUFFM0IsSUFBSSxDQUFDOUIsUUFBUSxJQUFJZ0M7SUFFakIsT0FBT0Q7QUFDWCIsImZpbGUiOiIocnNjKS8uL25vZGVfbW9kdWxlcy93a3gvbGliL2JpbmFyeXJlYWRlci5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/wkx/lib/binaryreader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/wkx/lib/binarywriter.js":
/*!**********************************************!*\
  !*** ./node_modules/wkx/lib/binarywriter.js ***!
  \**********************************************/
/***/ ((module) => {

eval("module.exports = BinaryWriter;\nfunction BinaryWriter(size, allowResize) {\n    this.buffer = new Buffer(size);\n    this.position = 0;\n    this.allowResize = allowResize;\n}\nfunction _write(write, size) {\n    return function(value, noAssert) {\n        this.ensureSize(size);\n        write.call(this.buffer, value, this.position, noAssert);\n        this.position += size;\n    };\n}\nBinaryWriter.prototype.writeUInt8 = _write(Buffer.prototype.writeUInt8, 1);\nBinaryWriter.prototype.writeUInt16LE = _write(Buffer.prototype.writeUInt16LE, 2);\nBinaryWriter.prototype.writeUInt16BE = _write(Buffer.prototype.writeUInt16BE, 2);\nBinaryWriter.prototype.writeUInt32LE = _write(Buffer.prototype.writeUInt32LE, 4);\nBinaryWriter.prototype.writeUInt32BE = _write(Buffer.prototype.writeUInt32BE, 4);\nBinaryWriter.prototype.writeInt8 = _write(Buffer.prototype.writeInt8, 1);\nBinaryWriter.prototype.writeInt16LE = _write(Buffer.prototype.writeInt16LE, 2);\nBinaryWriter.prototype.writeInt16BE = _write(Buffer.prototype.writeInt16BE, 2);\nBinaryWriter.prototype.writeInt32LE = _write(Buffer.prototype.writeInt32LE, 4);\nBinaryWriter.prototype.writeInt32BE = _write(Buffer.prototype.writeInt32BE, 4);\nBinaryWriter.prototype.writeFloatLE = _write(Buffer.prototype.writeFloatLE, 4);\nBinaryWriter.prototype.writeFloatBE = _write(Buffer.prototype.writeFloatBE, 4);\nBinaryWriter.prototype.writeDoubleLE = _write(Buffer.prototype.writeDoubleLE, 8);\nBinaryWriter.prototype.writeDoubleBE = _write(Buffer.prototype.writeDoubleBE, 8);\nBinaryWriter.prototype.writeBuffer = function(buffer) {\n    this.ensureSize(buffer.length);\n    buffer.copy(this.buffer, this.position, 0, buffer.length);\n    this.position += buffer.length;\n};\nBinaryWriter.prototype.writeVarInt = function(value) {\n    var length = 1;\n    while((value & 0xFFFFFF80) !== 0){\n        this.writeUInt8(value & 0x7F | 0x80);\n        value >>>= 7;\n        length++;\n    }\n    this.writeUInt8(value & 0x7F);\n    return length;\n};\nBinaryWriter.prototype.ensureSize = function(size) {\n    if (this.buffer.length < this.position + size) {\n        if (this.allowResize) {\n            var tempBuffer = new Buffer(this.position + size);\n            this.buffer.copy(tempBuffer, 0, 0, this.buffer.length);\n            this.buffer = tempBuffer;\n        } else {\n            throw new RangeError(\"index out of range\");\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbWktc3VwZXItYXBwLy4vbm9kZV9tb2R1bGVzL3dreC9saWIvYmluYXJ5d3JpdGVyLmpzP2Y3YjUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBCaW5hcnlXcml0ZXI7XHJcblxyXG5mdW5jdGlvbiBCaW5hcnlXcml0ZXIoc2l6ZSwgYWxsb3dSZXNpemUpIHtcclxuICAgIHRoaXMuYnVmZmVyID0gbmV3IEJ1ZmZlcihzaXplKTtcclxuICAgIHRoaXMucG9zaXRpb24gPSAwO1xyXG4gICAgdGhpcy5hbGxvd1Jlc2l6ZSA9IGFsbG93UmVzaXplO1xyXG59XHJcblxyXG5mdW5jdGlvbiBfd3JpdGUod3JpdGUsIHNpemUpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUsIG5vQXNzZXJ0KSB7XHJcbiAgICAgICAgdGhpcy5lbnN1cmVTaXplKHNpemUpO1xyXG5cclxuICAgICAgICB3cml0ZS5jYWxsKHRoaXMuYnVmZmVyLCB2YWx1ZSwgdGhpcy5wb3NpdGlvbiwgbm9Bc3NlcnQpO1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gKz0gc2l6ZTtcclxuICAgIH07XHJcbn1cclxuXHJcbkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IF93cml0ZShCdWZmZXIucHJvdG90eXBlLndyaXRlVUludDgsIDEpO1xyXG5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBfd3JpdGUoQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFLCAyKTtcclxuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gX3dyaXRlKEJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSwgMik7XHJcbkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IF93cml0ZShCdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUsIDQpO1xyXG5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBfd3JpdGUoQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFLCA0KTtcclxuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZUludDggPSBfd3JpdGUoQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDgsIDEpO1xyXG5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IF93cml0ZShCdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSwgMik7XHJcbkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gX3dyaXRlKEJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFLCAyKTtcclxuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBfd3JpdGUoQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUsIDQpO1xyXG5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IF93cml0ZShCdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSwgNCk7XHJcbkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gX3dyaXRlKEJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFLCA0KTtcclxuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBfd3JpdGUoQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUsIDQpO1xyXG5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBfd3JpdGUoQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFLCA4KTtcclxuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gX3dyaXRlKEJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSwgOCk7XHJcblxyXG5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlQnVmZmVyID0gZnVuY3Rpb24gKGJ1ZmZlcikge1xyXG4gICAgdGhpcy5lbnN1cmVTaXplKGJ1ZmZlci5sZW5ndGgpO1xyXG5cclxuICAgIGJ1ZmZlci5jb3B5KHRoaXMuYnVmZmVyLCB0aGlzLnBvc2l0aW9uLCAwLCBidWZmZXIubGVuZ3RoKTtcclxuICAgIHRoaXMucG9zaXRpb24gKz0gYnVmZmVyLmxlbmd0aDtcclxufTtcclxuXHJcbkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVWYXJJbnQgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgIHZhciBsZW5ndGggPSAxO1xyXG5cclxuICAgIHdoaWxlICgodmFsdWUgJiAweEZGRkZGRjgwKSAhPT0gMCkge1xyXG4gICAgICAgIHRoaXMud3JpdGVVSW50OCgodmFsdWUgJiAweDdGKSB8IDB4ODApO1xyXG4gICAgICAgIHZhbHVlID4+Pj0gNztcclxuICAgICAgICBsZW5ndGgrKztcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLndyaXRlVUludDgodmFsdWUgJiAweDdGKTtcclxuXHJcbiAgICByZXR1cm4gbGVuZ3RoO1xyXG59O1xyXG5cclxuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS5lbnN1cmVTaXplID0gZnVuY3Rpb24gKHNpemUpIHtcclxuICAgIGlmICh0aGlzLmJ1ZmZlci5sZW5ndGggPCB0aGlzLnBvc2l0aW9uICsgc2l6ZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmFsbG93UmVzaXplKSB7XHJcbiAgICAgICAgICAgIHZhciB0ZW1wQnVmZmVyID0gbmV3IEJ1ZmZlcih0aGlzLnBvc2l0aW9uICsgc2l6ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyLmNvcHkodGVtcEJ1ZmZlciwgMCwgMCwgdGhpcy5idWZmZXIubGVuZ3RoKTtcclxuICAgICAgICAgICAgdGhpcy5idWZmZXIgPSB0ZW1wQnVmZmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2luZGV4IG91dCBvZiByYW5nZScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJCaW5hcnlXcml0ZXIiLCJzaXplIiwiYWxsb3dSZXNpemUiLCJidWZmZXIiLCJCdWZmZXIiLCJwb3NpdGlvbiIsIl93cml0ZSIsIndyaXRlIiwidmFsdWUiLCJub0Fzc2VydCIsImVuc3VyZVNpemUiLCJjYWxsIiwicHJvdG90eXBlIiwid3JpdGVVSW50OCIsIndyaXRlVUludDE2TEUiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUludDgiLCJ3cml0ZUludDE2TEUiLCJ3cml0ZUludDE2QkUiLCJ3cml0ZUludDMyTEUiLCJ3cml0ZUludDMyQkUiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZUxFIiwid3JpdGVEb3VibGVCRSIsIndyaXRlQnVmZmVyIiwibGVuZ3RoIiwiY29weSIsIndyaXRlVmFySW50IiwidGVtcEJ1ZmZlciIsIlJhbmdlRXJyb3IiXSwibWFwcGluZ3MiOiJBQUFBQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLFNBQVNBLGFBQWFDLElBQUksRUFBRUMsV0FBVztJQUNuQyxJQUFJLENBQUNDLE1BQU0sR0FBRyxJQUFJQyxPQUFPSDtJQUN6QixJQUFJLENBQUNJLFFBQVEsR0FBRztJQUNoQixJQUFJLENBQUNILFdBQVcsR0FBR0E7QUFDdkI7QUFFQSxTQUFTSSxPQUFPQyxLQUFLLEVBQUVOLElBQUk7SUFDdkIsT0FBTyxTQUFVTyxLQUFLLEVBQUVDLFFBQVE7UUFDNUIsSUFBSSxDQUFDQyxVQUFVLENBQUNUO1FBRWhCTSxNQUFNSSxJQUFJLENBQUMsSUFBSSxDQUFDUixNQUFNLEVBQUVLLE9BQU8sSUFBSSxDQUFDSCxRQUFRLEVBQUVJO1FBQzlDLElBQUksQ0FBQ0osUUFBUSxJQUFJSjtJQUNyQjtBQUNKO0FBRUFELGFBQWFZLFNBQVMsQ0FBQ0MsVUFBVSxHQUFHUCxPQUFPRixPQUFPUSxTQUFTLENBQUNDLFVBQVUsRUFBRTtBQUN4RWIsYUFBYVksU0FBUyxDQUFDRSxhQUFhLEdBQUdSLE9BQU9GLE9BQU9RLFNBQVMsQ0FBQ0UsYUFBYSxFQUFFO0FBQzlFZCxhQUFhWSxTQUFTLENBQUNHLGFBQWEsR0FBR1QsT0FBT0YsT0FBT1EsU0FBUyxDQUFDRyxhQUFhLEVBQUU7QUFDOUVmLGFBQWFZLFNBQVMsQ0FBQ0ksYUFBYSxHQUFHVixPQUFPRixPQUFPUSxTQUFTLENBQUNJLGFBQWEsRUFBRTtBQUM5RWhCLGFBQWFZLFNBQVMsQ0FBQ0ssYUFBYSxHQUFHWCxPQUFPRixPQUFPUSxTQUFTLENBQUNLLGFBQWEsRUFBRTtBQUM5RWpCLGFBQWFZLFNBQVMsQ0FBQ00sU0FBUyxHQUFHWixPQUFPRixPQUFPUSxTQUFTLENBQUNNLFNBQVMsRUFBRTtBQUN0RWxCLGFBQWFZLFNBQVMsQ0FBQ08sWUFBWSxHQUFHYixPQUFPRixPQUFPUSxTQUFTLENBQUNPLFlBQVksRUFBRTtBQUM1RW5CLGFBQWFZLFNBQVMsQ0FBQ1EsWUFBWSxHQUFHZCxPQUFPRixPQUFPUSxTQUFTLENBQUNRLFlBQVksRUFBRTtBQUM1RXBCLGFBQWFZLFNBQVMsQ0FBQ1MsWUFBWSxHQUFHZixPQUFPRixPQUFPUSxTQUFTLENBQUNTLFlBQVksRUFBRTtBQUM1RXJCLGFBQWFZLFNBQVMsQ0FBQ1UsWUFBWSxHQUFHaEIsT0FBT0YsT0FBT1EsU0FBUyxDQUFDVSxZQUFZLEVBQUU7QUFDNUV0QixhQUFhWSxTQUFTLENBQUNXLFlBQVksR0FBR2pCLE9BQU9GLE9BQU9RLFNBQVMsQ0FBQ1csWUFBWSxFQUFFO0FBQzVFdkIsYUFBYVksU0FBUyxDQUFDWSxZQUFZLEdBQUdsQixPQUFPRixPQUFPUSxTQUFTLENBQUNZLFlBQVksRUFBRTtBQUM1RXhCLGFBQWFZLFNBQVMsQ0FBQ2EsYUFBYSxHQUFHbkIsT0FBT0YsT0FBT1EsU0FBUyxDQUFDYSxhQUFhLEVBQUU7QUFDOUV6QixhQUFhWSxTQUFTLENBQUNjLGFBQWEsR0FBR3BCLE9BQU9GLE9BQU9RLFNBQVMsQ0FBQ2MsYUFBYSxFQUFFO0FBRTlFMUIsYUFBYVksU0FBUyxDQUFDZSxXQUFXLEdBQUcsU0FBVXhCLE1BQU07SUFDakQsSUFBSSxDQUFDTyxVQUFVLENBQUNQLE9BQU95QixNQUFNO0lBRTdCekIsT0FBTzBCLElBQUksQ0FBQyxJQUFJLENBQUMxQixNQUFNLEVBQUUsSUFBSSxDQUFDRSxRQUFRLEVBQUUsR0FBR0YsT0FBT3lCLE1BQU07SUFDeEQsSUFBSSxDQUFDdkIsUUFBUSxJQUFJRixPQUFPeUIsTUFBTTtBQUNsQztBQUVBNUIsYUFBYVksU0FBUyxDQUFDa0IsV0FBVyxHQUFHLFNBQVV0QixLQUFLO0lBQ2hELElBQUlvQixTQUFTO0lBRWIsTUFBTyxBQUFDcEIsQ0FBQUEsUUFBUSxVQUFTLE1BQU8sRUFBRztRQUMvQixJQUFJLENBQUNLLFVBQVUsQ0FBQyxBQUFDTCxRQUFRLE9BQVE7UUFDakNBLFdBQVc7UUFDWG9CO0lBQ0o7SUFFQSxJQUFJLENBQUNmLFVBQVUsQ0FBQ0wsUUFBUTtJQUV4QixPQUFPb0I7QUFDWDtBQUVBNUIsYUFBYVksU0FBUyxDQUFDRixVQUFVLEdBQUcsU0FBVVQsSUFBSTtJQUM5QyxJQUFJLElBQUksQ0FBQ0UsTUFBTSxDQUFDeUIsTUFBTSxHQUFHLElBQUksQ0FBQ3ZCLFFBQVEsR0FBR0osTUFBTTtRQUMzQyxJQUFJLElBQUksQ0FBQ0MsV0FBVyxFQUFFO1lBQ2xCLElBQUk2QixhQUFhLElBQUkzQixPQUFPLElBQUksQ0FBQ0MsUUFBUSxHQUFHSjtZQUM1QyxJQUFJLENBQUNFLE1BQU0sQ0FBQzBCLElBQUksQ0FBQ0UsWUFBWSxHQUFHLEdBQUcsSUFBSSxDQUFDNUIsTUFBTSxDQUFDeUIsTUFBTTtZQUNyRCxJQUFJLENBQUN6QixNQUFNLEdBQUc0QjtRQUNsQixPQUNLO1lBQ0QsTUFBTSxJQUFJQyxXQUFXO1FBQ3pCO0lBQ0o7QUFDSiIsImZpbGUiOiIocnNjKS8uL25vZGVfbW9kdWxlcy93a3gvbGliL2JpbmFyeXdyaXRlci5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/wkx/lib/binarywriter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/wkx/lib/geometry.js":
/*!******************************************!*\
  !*** ./node_modules/wkx/lib/geometry.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = Geometry;\nvar Types = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/wkx/lib/types.js\");\nvar Point = __webpack_require__(/*! ./point */ \"(rsc)/./node_modules/wkx/lib/point.js\");\nvar LineString = __webpack_require__(/*! ./linestring */ \"(rsc)/./node_modules/wkx/lib/linestring.js\");\nvar Polygon = __webpack_require__(/*! ./polygon */ \"(rsc)/./node_modules/wkx/lib/polygon.js\");\nvar MultiPoint = __webpack_require__(/*! ./multipoint */ \"(rsc)/./node_modules/wkx/lib/multipoint.js\");\nvar MultiLineString = __webpack_require__(/*! ./multilinestring */ \"(rsc)/./node_modules/wkx/lib/multilinestring.js\");\nvar MultiPolygon = __webpack_require__(/*! ./multipolygon */ \"(rsc)/./node_modules/wkx/lib/multipolygon.js\");\nvar GeometryCollection = __webpack_require__(/*! ./geometrycollection */ \"(rsc)/./node_modules/wkx/lib/geometrycollection.js\");\nvar BinaryReader = __webpack_require__(/*! ./binaryreader */ \"(rsc)/./node_modules/wkx/lib/binaryreader.js\");\nvar BinaryWriter = __webpack_require__(/*! ./binarywriter */ \"(rsc)/./node_modules/wkx/lib/binarywriter.js\");\nvar WktParser = __webpack_require__(/*! ./wktparser */ \"(rsc)/./node_modules/wkx/lib/wktparser.js\");\nvar ZigZag = __webpack_require__(/*! ./zigzag.js */ \"(rsc)/./node_modules/wkx/lib/zigzag.js\");\nfunction Geometry() {\n    this.srid = undefined;\n    this.hasZ = false;\n    this.hasM = false;\n}\nGeometry.parse = function(value, options) {\n    var valueType = typeof value;\n    if (valueType === \"string\" || value instanceof WktParser) return Geometry._parseWkt(value);\n    else if (Buffer.isBuffer(value) || value instanceof BinaryReader) return Geometry._parseWkb(value, options);\n    else throw new Error(\"first argument must be a string or Buffer\");\n};\nGeometry._parseWkt = function(value) {\n    var wktParser, srid;\n    if (value instanceof WktParser) wktParser = value;\n    else wktParser = new WktParser(value);\n    var match = wktParser.matchRegex([\n        /^SRID=(\\d+);/\n    ]);\n    if (match) srid = parseInt(match[1], 10);\n    var geometryType = wktParser.matchType();\n    var dimension = wktParser.matchDimension();\n    var options = {\n        srid: srid,\n        hasZ: dimension.hasZ,\n        hasM: dimension.hasM\n    };\n    switch(geometryType){\n        case Types.wkt.Point:\n            return Point._parseWkt(wktParser, options);\n        case Types.wkt.LineString:\n            return LineString._parseWkt(wktParser, options);\n        case Types.wkt.Polygon:\n            return Polygon._parseWkt(wktParser, options);\n        case Types.wkt.MultiPoint:\n            return MultiPoint._parseWkt(wktParser, options);\n        case Types.wkt.MultiLineString:\n            return MultiLineString._parseWkt(wktParser, options);\n        case Types.wkt.MultiPolygon:\n            return MultiPolygon._parseWkt(wktParser, options);\n        case Types.wkt.GeometryCollection:\n            return GeometryCollection._parseWkt(wktParser, options);\n    }\n};\nGeometry._parseWkb = function(value, parentOptions) {\n    var binaryReader, wkbType, geometryType, options = {};\n    if (value instanceof BinaryReader) binaryReader = value;\n    else binaryReader = new BinaryReader(value);\n    binaryReader.isBigEndian = !binaryReader.readInt8();\n    wkbType = binaryReader.readUInt32();\n    options.hasSrid = (wkbType & 0x20000000) === 0x20000000;\n    options.isEwkb = wkbType & 0x20000000 || wkbType & 0x40000000 || wkbType & 0x80000000;\n    if (options.hasSrid) options.srid = binaryReader.readUInt32();\n    options.hasZ = false;\n    options.hasM = false;\n    if (!options.isEwkb && (!parentOptions || !parentOptions.isEwkb)) {\n        if (wkbType >= 1000 && wkbType < 2000) {\n            options.hasZ = true;\n            geometryType = wkbType - 1000;\n        } else if (wkbType >= 2000 && wkbType < 3000) {\n            options.hasM = true;\n            geometryType = wkbType - 2000;\n        } else if (wkbType >= 3000 && wkbType < 4000) {\n            options.hasZ = true;\n            options.hasM = true;\n            geometryType = wkbType - 3000;\n        } else {\n            geometryType = wkbType;\n        }\n    } else {\n        if (wkbType & 0x80000000) options.hasZ = true;\n        if (wkbType & 0x40000000) options.hasM = true;\n        geometryType = wkbType & 0xF;\n    }\n    switch(geometryType){\n        case Types.wkb.Point:\n            return Point._parseWkb(binaryReader, options);\n        case Types.wkb.LineString:\n            return LineString._parseWkb(binaryReader, options);\n        case Types.wkb.Polygon:\n            return Polygon._parseWkb(binaryReader, options);\n        case Types.wkb.MultiPoint:\n            return MultiPoint._parseWkb(binaryReader, options);\n        case Types.wkb.MultiLineString:\n            return MultiLineString._parseWkb(binaryReader, options);\n        case Types.wkb.MultiPolygon:\n            return MultiPolygon._parseWkb(binaryReader, options);\n        case Types.wkb.GeometryCollection:\n            return GeometryCollection._parseWkb(binaryReader, options);\n        default:\n            throw new Error(\"GeometryType \" + geometryType + \" not supported\");\n    }\n};\nGeometry.parseTwkb = function(value) {\n    var binaryReader, options = {};\n    if (value instanceof BinaryReader) binaryReader = value;\n    else binaryReader = new BinaryReader(value);\n    var type = binaryReader.readUInt8();\n    var metadataHeader = binaryReader.readUInt8();\n    var geometryType = type & 0x0F;\n    options.precision = ZigZag.decode(type >> 4);\n    options.precisionFactor = Math.pow(10, options.precision);\n    options.hasBoundingBox = metadataHeader >> 0 & 1;\n    options.hasSizeAttribute = metadataHeader >> 1 & 1;\n    options.hasIdList = metadataHeader >> 2 & 1;\n    options.hasExtendedPrecision = metadataHeader >> 3 & 1;\n    options.isEmpty = metadataHeader >> 4 & 1;\n    if (options.hasExtendedPrecision) {\n        var extendedPrecision = binaryReader.readUInt8();\n        options.hasZ = (extendedPrecision & 0x01) === 0x01;\n        options.hasM = (extendedPrecision & 0x02) === 0x02;\n        options.zPrecision = ZigZag.decode((extendedPrecision & 0x1C) >> 2);\n        options.zPrecisionFactor = Math.pow(10, options.zPrecision);\n        options.mPrecision = ZigZag.decode((extendedPrecision & 0xE0) >> 5);\n        options.mPrecisionFactor = Math.pow(10, options.mPrecision);\n    } else {\n        options.hasZ = false;\n        options.hasM = false;\n    }\n    if (options.hasSizeAttribute) binaryReader.readVarInt();\n    if (options.hasBoundingBox) {\n        var dimensions = 2;\n        if (options.hasZ) dimensions++;\n        if (options.hasM) dimensions++;\n        for(var i = 0; i < dimensions; i++){\n            binaryReader.readVarInt();\n            binaryReader.readVarInt();\n        }\n    }\n    switch(geometryType){\n        case Types.wkb.Point:\n            return Point._parseTwkb(binaryReader, options);\n        case Types.wkb.LineString:\n            return LineString._parseTwkb(binaryReader, options);\n        case Types.wkb.Polygon:\n            return Polygon._parseTwkb(binaryReader, options);\n        case Types.wkb.MultiPoint:\n            return MultiPoint._parseTwkb(binaryReader, options);\n        case Types.wkb.MultiLineString:\n            return MultiLineString._parseTwkb(binaryReader, options);\n        case Types.wkb.MultiPolygon:\n            return MultiPolygon._parseTwkb(binaryReader, options);\n        case Types.wkb.GeometryCollection:\n            return GeometryCollection._parseTwkb(binaryReader, options);\n        default:\n            throw new Error(\"GeometryType \" + geometryType + \" not supported\");\n    }\n};\nGeometry.parseGeoJSON = function(value) {\n    return Geometry._parseGeoJSON(value);\n};\nGeometry._parseGeoJSON = function(value, isSubGeometry) {\n    var geometry;\n    switch(value.type){\n        case Types.geoJSON.Point:\n            geometry = Point._parseGeoJSON(value);\n            break;\n        case Types.geoJSON.LineString:\n            geometry = LineString._parseGeoJSON(value);\n            break;\n        case Types.geoJSON.Polygon:\n            geometry = Polygon._parseGeoJSON(value);\n            break;\n        case Types.geoJSON.MultiPoint:\n            geometry = MultiPoint._parseGeoJSON(value);\n            break;\n        case Types.geoJSON.MultiLineString:\n            geometry = MultiLineString._parseGeoJSON(value);\n            break;\n        case Types.geoJSON.MultiPolygon:\n            geometry = MultiPolygon._parseGeoJSON(value);\n            break;\n        case Types.geoJSON.GeometryCollection:\n            geometry = GeometryCollection._parseGeoJSON(value);\n            break;\n        default:\n            throw new Error(\"GeometryType \" + value.type + \" not supported\");\n    }\n    if (value.crs && value.crs.type && value.crs.type === \"name\" && value.crs.properties && value.crs.properties.name) {\n        var crs = value.crs.properties.name;\n        if (crs.indexOf(\"EPSG:\") === 0) geometry.srid = parseInt(crs.substring(5));\n        else if (crs.indexOf(\"urn:ogc:def:crs:EPSG::\") === 0) geometry.srid = parseInt(crs.substring(22));\n        else throw new Error(\"Unsupported crs: \" + crs);\n    } else if (!isSubGeometry) {\n        geometry.srid = 4326;\n    }\n    return geometry;\n};\nGeometry.prototype.toEwkt = function() {\n    return \"SRID=\" + this.srid + \";\" + this.toWkt();\n};\nGeometry.prototype.toEwkb = function() {\n    var ewkb = new BinaryWriter(this._getWkbSize() + 4);\n    var wkb = this.toWkb();\n    ewkb.writeInt8(1);\n    ewkb.writeUInt32LE((wkb.slice(1, 5).readUInt32LE(0) | 0x20000000) >>> 0, true);\n    ewkb.writeUInt32LE(this.srid);\n    ewkb.writeBuffer(wkb.slice(5));\n    return ewkb.buffer;\n};\nGeometry.prototype._getWktType = function(wktType, isEmpty) {\n    var wkt = wktType;\n    if (this.hasZ && this.hasM) wkt += \" ZM \";\n    else if (this.hasZ) wkt += \" Z \";\n    else if (this.hasM) wkt += \" M \";\n    if (isEmpty && !this.hasZ && !this.hasM) wkt += \" \";\n    if (isEmpty) wkt += \"EMPTY\";\n    return wkt;\n};\nGeometry.prototype._getWktCoordinate = function(point) {\n    var coordinates = point.x + \" \" + point.y;\n    if (this.hasZ) coordinates += \" \" + point.z;\n    if (this.hasM) coordinates += \" \" + point.m;\n    return coordinates;\n};\nGeometry.prototype._writeWkbType = function(wkb, geometryType, parentOptions) {\n    var dimensionType = 0;\n    if (typeof this.srid === \"undefined\" && (!parentOptions || typeof parentOptions.srid === \"undefined\")) {\n        if (this.hasZ && this.hasM) dimensionType += 3000;\n        else if (this.hasZ) dimensionType += 1000;\n        else if (this.hasM) dimensionType += 2000;\n    } else {\n        if (this.hasZ) dimensionType |= 0x80000000;\n        if (this.hasM) dimensionType |= 0x40000000;\n    }\n    wkb.writeUInt32LE(dimensionType + geometryType >>> 0, true);\n};\nGeometry.getTwkbPrecision = function(xyPrecision, zPrecision, mPrecision) {\n    return {\n        xy: xyPrecision,\n        z: zPrecision,\n        m: mPrecision,\n        xyFactor: Math.pow(10, xyPrecision),\n        zFactor: Math.pow(10, zPrecision),\n        mFactor: Math.pow(10, mPrecision)\n    };\n};\nGeometry.prototype._writeTwkbHeader = function(twkb, geometryType, precision, isEmpty) {\n    var type = (ZigZag.encode(precision.xy) << 4) + geometryType;\n    var metadataHeader = (this.hasZ || this.hasM) << 3;\n    metadataHeader += isEmpty << 4;\n    twkb.writeUInt8(type);\n    twkb.writeUInt8(metadataHeader);\n    if (this.hasZ || this.hasM) {\n        var extendedPrecision = 0;\n        if (this.hasZ) extendedPrecision |= 0x1;\n        if (this.hasM) extendedPrecision |= 0x2;\n        twkb.writeUInt8(extendedPrecision);\n    }\n};\nGeometry.prototype.toGeoJSON = function(options) {\n    var geoJSON = {};\n    if (this.srid) {\n        if (options) {\n            if (options.shortCrs) {\n                geoJSON.crs = {\n                    type: \"name\",\n                    properties: {\n                        name: \"EPSG:\" + this.srid\n                    }\n                };\n            } else if (options.longCrs) {\n                geoJSON.crs = {\n                    type: \"name\",\n                    properties: {\n                        name: \"urn:ogc:def:crs:EPSG::\" + this.srid\n                    }\n                };\n            }\n        }\n    }\n    return geoJSON;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/wkx/lib/geometry.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/wkx/lib/geometrycollection.js":
/*!****************************************************!*\
  !*** ./node_modules/wkx/lib/geometrycollection.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = GeometryCollection;\nvar util = __webpack_require__(/*! util */ \"util\");\nvar Types = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/wkx/lib/types.js\");\nvar Geometry = __webpack_require__(/*! ./geometry */ \"(rsc)/./node_modules/wkx/lib/geometry.js\");\nvar BinaryWriter = __webpack_require__(/*! ./binarywriter */ \"(rsc)/./node_modules/wkx/lib/binarywriter.js\");\nfunction GeometryCollection(geometries, srid) {\n    Geometry.call(this);\n    this.geometries = geometries || [];\n    this.srid = srid;\n    if (this.geometries.length > 0) {\n        this.hasZ = this.geometries[0].hasZ;\n        this.hasM = this.geometries[0].hasM;\n    }\n}\nutil.inherits(GeometryCollection, Geometry);\nGeometryCollection.Z = function(geometries, srid) {\n    var geometryCollection = new GeometryCollection(geometries, srid);\n    geometryCollection.hasZ = true;\n    return geometryCollection;\n};\nGeometryCollection.M = function(geometries, srid) {\n    var geometryCollection = new GeometryCollection(geometries, srid);\n    geometryCollection.hasM = true;\n    return geometryCollection;\n};\nGeometryCollection.ZM = function(geometries, srid) {\n    var geometryCollection = new GeometryCollection(geometries, srid);\n    geometryCollection.hasZ = true;\n    geometryCollection.hasM = true;\n    return geometryCollection;\n};\nGeometryCollection._parseWkt = function(value, options) {\n    var geometryCollection = new GeometryCollection();\n    geometryCollection.srid = options.srid;\n    geometryCollection.hasZ = options.hasZ;\n    geometryCollection.hasM = options.hasM;\n    if (value.isMatch([\n        \"EMPTY\"\n    ])) return geometryCollection;\n    value.expectGroupStart();\n    do {\n        geometryCollection.geometries.push(Geometry.parse(value));\n    }while (value.isMatch([\n        \",\"\n    ]));\n    value.expectGroupEnd();\n    return geometryCollection;\n};\nGeometryCollection._parseWkb = function(value, options) {\n    var geometryCollection = new GeometryCollection();\n    geometryCollection.srid = options.srid;\n    geometryCollection.hasZ = options.hasZ;\n    geometryCollection.hasM = options.hasM;\n    var geometryCount = value.readUInt32();\n    for(var i = 0; i < geometryCount; i++)geometryCollection.geometries.push(Geometry.parse(value, options));\n    return geometryCollection;\n};\nGeometryCollection._parseTwkb = function(value, options) {\n    var geometryCollection = new GeometryCollection();\n    geometryCollection.hasZ = options.hasZ;\n    geometryCollection.hasM = options.hasM;\n    if (options.isEmpty) return geometryCollection;\n    var geometryCount = value.readVarInt();\n    for(var i = 0; i < geometryCount; i++)geometryCollection.geometries.push(Geometry.parseTwkb(value));\n    return geometryCollection;\n};\nGeometryCollection._parseGeoJSON = function(value) {\n    var geometryCollection = new GeometryCollection();\n    for(var i = 0; i < value.geometries.length; i++)geometryCollection.geometries.push(Geometry._parseGeoJSON(value.geometries[i], true));\n    if (geometryCollection.geometries.length > 0) geometryCollection.hasZ = geometryCollection.geometries[0].hasZ;\n    return geometryCollection;\n};\nGeometryCollection.prototype.toWkt = function() {\n    if (this.geometries.length === 0) return this._getWktType(Types.wkt.GeometryCollection, true);\n    var wkt = this._getWktType(Types.wkt.GeometryCollection, false) + \"(\";\n    for(var i = 0; i < this.geometries.length; i++)wkt += this.geometries[i].toWkt() + \",\";\n    wkt = wkt.slice(0, -1);\n    wkt += \")\";\n    return wkt;\n};\nGeometryCollection.prototype.toWkb = function() {\n    var wkb = new BinaryWriter(this._getWkbSize());\n    wkb.writeInt8(1);\n    this._writeWkbType(wkb, Types.wkb.GeometryCollection);\n    wkb.writeUInt32LE(this.geometries.length);\n    for(var i = 0; i < this.geometries.length; i++)wkb.writeBuffer(this.geometries[i].toWkb({\n        srid: this.srid\n    }));\n    return wkb.buffer;\n};\nGeometryCollection.prototype.toTwkb = function() {\n    var twkb = new BinaryWriter(0, true);\n    var precision = Geometry.getTwkbPrecision(5, 0, 0);\n    var isEmpty = this.geometries.length === 0;\n    this._writeTwkbHeader(twkb, Types.wkb.GeometryCollection, precision, isEmpty);\n    if (this.geometries.length > 0) {\n        twkb.writeVarInt(this.geometries.length);\n        for(var i = 0; i < this.geometries.length; i++)twkb.writeBuffer(this.geometries[i].toTwkb());\n    }\n    return twkb.buffer;\n};\nGeometryCollection.prototype._getWkbSize = function() {\n    var size = 1 + 4 + 4;\n    for(var i = 0; i < this.geometries.length; i++)size += this.geometries[i]._getWkbSize();\n    return size;\n};\nGeometryCollection.prototype.toGeoJSON = function(options) {\n    var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);\n    geoJSON.type = Types.geoJSON.GeometryCollection;\n    geoJSON.geometries = [];\n    for(var i = 0; i < this.geometries.length; i++)geoJSON.geometries.push(this.geometries[i].toGeoJSON());\n    return geoJSON;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/wkx/lib/geometrycollection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/wkx/lib/linestring.js":
/*!********************************************!*\
  !*** ./node_modules/wkx/lib/linestring.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = LineString;\nvar util = __webpack_require__(/*! util */ \"util\");\nvar Geometry = __webpack_require__(/*! ./geometry */ \"(rsc)/./node_modules/wkx/lib/geometry.js\");\nvar Types = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/wkx/lib/types.js\");\nvar Point = __webpack_require__(/*! ./point */ \"(rsc)/./node_modules/wkx/lib/point.js\");\nvar BinaryWriter = __webpack_require__(/*! ./binarywriter */ \"(rsc)/./node_modules/wkx/lib/binarywriter.js\");\nfunction LineString(points, srid) {\n    Geometry.call(this);\n    this.points = points || [];\n    this.srid = srid;\n    if (this.points.length > 0) {\n        this.hasZ = this.points[0].hasZ;\n        this.hasM = this.points[0].hasM;\n    }\n}\nutil.inherits(LineString, Geometry);\nLineString.Z = function(points, srid) {\n    var lineString = new LineString(points, srid);\n    lineString.hasZ = true;\n    return lineString;\n};\nLineString.M = function(points, srid) {\n    var lineString = new LineString(points, srid);\n    lineString.hasM = true;\n    return lineString;\n};\nLineString.ZM = function(points, srid) {\n    var lineString = new LineString(points, srid);\n    lineString.hasZ = true;\n    lineString.hasM = true;\n    return lineString;\n};\nLineString._parseWkt = function(value, options) {\n    var lineString = new LineString();\n    lineString.srid = options.srid;\n    lineString.hasZ = options.hasZ;\n    lineString.hasM = options.hasM;\n    if (value.isMatch([\n        \"EMPTY\"\n    ])) return lineString;\n    value.expectGroupStart();\n    lineString.points.push.apply(lineString.points, value.matchCoordinates(options));\n    value.expectGroupEnd();\n    return lineString;\n};\nLineString._parseWkb = function(value, options) {\n    var lineString = new LineString();\n    lineString.srid = options.srid;\n    lineString.hasZ = options.hasZ;\n    lineString.hasM = options.hasM;\n    var pointCount = value.readUInt32();\n    for(var i = 0; i < pointCount; i++)lineString.points.push(Point._readWkbPoint(value, options));\n    return lineString;\n};\nLineString._parseTwkb = function(value, options) {\n    var lineString = new LineString();\n    lineString.hasZ = options.hasZ;\n    lineString.hasM = options.hasM;\n    if (options.isEmpty) return lineString;\n    var previousPoint = new Point(0, 0, options.hasZ ? 0 : undefined, options.hasM ? 0 : undefined);\n    var pointCount = value.readVarInt();\n    for(var i = 0; i < pointCount; i++)lineString.points.push(Point._readTwkbPoint(value, options, previousPoint));\n    return lineString;\n};\nLineString._parseGeoJSON = function(value) {\n    var lineString = new LineString();\n    if (value.coordinates.length > 0) lineString.hasZ = value.coordinates[0].length > 2;\n    for(var i = 0; i < value.coordinates.length; i++)lineString.points.push(Point._readGeoJSONPoint(value.coordinates[i]));\n    return lineString;\n};\nLineString.prototype.toWkt = function() {\n    if (this.points.length === 0) return this._getWktType(Types.wkt.LineString, true);\n    return this._getWktType(Types.wkt.LineString, false) + this._toInnerWkt();\n};\nLineString.prototype._toInnerWkt = function() {\n    var innerWkt = \"(\";\n    for(var i = 0; i < this.points.length; i++)innerWkt += this._getWktCoordinate(this.points[i]) + \",\";\n    innerWkt = innerWkt.slice(0, -1);\n    innerWkt += \")\";\n    return innerWkt;\n};\nLineString.prototype.toWkb = function(parentOptions) {\n    var wkb = new BinaryWriter(this._getWkbSize());\n    wkb.writeInt8(1);\n    this._writeWkbType(wkb, Types.wkb.LineString, parentOptions);\n    wkb.writeUInt32LE(this.points.length);\n    for(var i = 0; i < this.points.length; i++)this.points[i]._writeWkbPoint(wkb);\n    return wkb.buffer;\n};\nLineString.prototype.toTwkb = function() {\n    var twkb = new BinaryWriter(0, true);\n    var precision = Geometry.getTwkbPrecision(5, 0, 0);\n    var isEmpty = this.points.length === 0;\n    this._writeTwkbHeader(twkb, Types.wkb.LineString, precision, isEmpty);\n    if (this.points.length > 0) {\n        twkb.writeVarInt(this.points.length);\n        var previousPoint = new Point(0, 0, 0, 0);\n        for(var i = 0; i < this.points.length; i++)this.points[i]._writeTwkbPoint(twkb, precision, previousPoint);\n    }\n    return twkb.buffer;\n};\nLineString.prototype._getWkbSize = function() {\n    var coordinateSize = 16;\n    if (this.hasZ) coordinateSize += 8;\n    if (this.hasM) coordinateSize += 8;\n    return 1 + 4 + 4 + this.points.length * coordinateSize;\n};\nLineString.prototype.toGeoJSON = function(options) {\n    var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);\n    geoJSON.type = Types.geoJSON.LineString;\n    geoJSON.coordinates = [];\n    for(var i = 0; i < this.points.length; i++){\n        if (this.hasZ) geoJSON.coordinates.push([\n            this.points[i].x,\n            this.points[i].y,\n            this.points[i].z\n        ]);\n        else geoJSON.coordinates.push([\n            this.points[i].x,\n            this.points[i].y\n        ]);\n    }\n    return geoJSON;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/wkx/lib/linestring.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/wkx/lib/multilinestring.js":
/*!*************************************************!*\
  !*** ./node_modules/wkx/lib/multilinestring.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = MultiLineString;\nvar util = __webpack_require__(/*! util */ \"util\");\nvar Types = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/wkx/lib/types.js\");\nvar Geometry = __webpack_require__(/*! ./geometry */ \"(rsc)/./node_modules/wkx/lib/geometry.js\");\nvar Point = __webpack_require__(/*! ./point */ \"(rsc)/./node_modules/wkx/lib/point.js\");\nvar LineString = __webpack_require__(/*! ./linestring */ \"(rsc)/./node_modules/wkx/lib/linestring.js\");\nvar BinaryWriter = __webpack_require__(/*! ./binarywriter */ \"(rsc)/./node_modules/wkx/lib/binarywriter.js\");\nfunction MultiLineString(lineStrings, srid) {\n    Geometry.call(this);\n    this.lineStrings = lineStrings || [];\n    this.srid = srid;\n    if (this.lineStrings.length > 0) {\n        this.hasZ = this.lineStrings[0].hasZ;\n        this.hasM = this.lineStrings[0].hasM;\n    }\n}\nutil.inherits(MultiLineString, Geometry);\nMultiLineString.Z = function(lineStrings, srid) {\n    var multiLineString = new MultiLineString(lineStrings, srid);\n    multiLineString.hasZ = true;\n    return multiLineString;\n};\nMultiLineString.M = function(lineStrings, srid) {\n    var multiLineString = new MultiLineString(lineStrings, srid);\n    multiLineString.hasM = true;\n    return multiLineString;\n};\nMultiLineString.ZM = function(lineStrings, srid) {\n    var multiLineString = new MultiLineString(lineStrings, srid);\n    multiLineString.hasZ = true;\n    multiLineString.hasM = true;\n    return multiLineString;\n};\nMultiLineString._parseWkt = function(value, options) {\n    var multiLineString = new MultiLineString();\n    multiLineString.srid = options.srid;\n    multiLineString.hasZ = options.hasZ;\n    multiLineString.hasM = options.hasM;\n    if (value.isMatch([\n        \"EMPTY\"\n    ])) return multiLineString;\n    value.expectGroupStart();\n    do {\n        value.expectGroupStart();\n        multiLineString.lineStrings.push(new LineString(value.matchCoordinates(options)));\n        value.expectGroupEnd();\n    }while (value.isMatch([\n        \",\"\n    ]));\n    value.expectGroupEnd();\n    return multiLineString;\n};\nMultiLineString._parseWkb = function(value, options) {\n    var multiLineString = new MultiLineString();\n    multiLineString.srid = options.srid;\n    multiLineString.hasZ = options.hasZ;\n    multiLineString.hasM = options.hasM;\n    var lineStringCount = value.readUInt32();\n    for(var i = 0; i < lineStringCount; i++)multiLineString.lineStrings.push(Geometry.parse(value, options));\n    return multiLineString;\n};\nMultiLineString._parseTwkb = function(value, options) {\n    var multiLineString = new MultiLineString();\n    multiLineString.hasZ = options.hasZ;\n    multiLineString.hasM = options.hasM;\n    if (options.isEmpty) return multiLineString;\n    var previousPoint = new Point(0, 0, options.hasZ ? 0 : undefined, options.hasM ? 0 : undefined);\n    var lineStringCount = value.readVarInt();\n    for(var i = 0; i < lineStringCount; i++){\n        var lineString = new LineString();\n        lineString.hasZ = options.hasZ;\n        lineString.hasM = options.hasM;\n        var pointCount = value.readVarInt();\n        for(var j = 0; j < pointCount; j++)lineString.points.push(Point._readTwkbPoint(value, options, previousPoint));\n        multiLineString.lineStrings.push(lineString);\n    }\n    return multiLineString;\n};\nMultiLineString._parseGeoJSON = function(value) {\n    var multiLineString = new MultiLineString();\n    if (value.coordinates.length > 0 && value.coordinates[0].length > 0) multiLineString.hasZ = value.coordinates[0][0].length > 2;\n    for(var i = 0; i < value.coordinates.length; i++)multiLineString.lineStrings.push(LineString._parseGeoJSON({\n        coordinates: value.coordinates[i]\n    }));\n    return multiLineString;\n};\nMultiLineString.prototype.toWkt = function() {\n    if (this.lineStrings.length === 0) return this._getWktType(Types.wkt.MultiLineString, true);\n    var wkt = this._getWktType(Types.wkt.MultiLineString, false) + \"(\";\n    for(var i = 0; i < this.lineStrings.length; i++)wkt += this.lineStrings[i]._toInnerWkt() + \",\";\n    wkt = wkt.slice(0, -1);\n    wkt += \")\";\n    return wkt;\n};\nMultiLineString.prototype.toWkb = function() {\n    var wkb = new BinaryWriter(this._getWkbSize());\n    wkb.writeInt8(1);\n    this._writeWkbType(wkb, Types.wkb.MultiLineString);\n    wkb.writeUInt32LE(this.lineStrings.length);\n    for(var i = 0; i < this.lineStrings.length; i++)wkb.writeBuffer(this.lineStrings[i].toWkb({\n        srid: this.srid\n    }));\n    return wkb.buffer;\n};\nMultiLineString.prototype.toTwkb = function() {\n    var twkb = new BinaryWriter(0, true);\n    var precision = Geometry.getTwkbPrecision(5, 0, 0);\n    var isEmpty = this.lineStrings.length === 0;\n    this._writeTwkbHeader(twkb, Types.wkb.MultiLineString, precision, isEmpty);\n    if (this.lineStrings.length > 0) {\n        twkb.writeVarInt(this.lineStrings.length);\n        var previousPoint = new Point(0, 0, 0, 0);\n        for(var i = 0; i < this.lineStrings.length; i++){\n            twkb.writeVarInt(this.lineStrings[i].points.length);\n            for(var j = 0; j < this.lineStrings[i].points.length; j++)this.lineStrings[i].points[j]._writeTwkbPoint(twkb, precision, previousPoint);\n        }\n    }\n    return twkb.buffer;\n};\nMultiLineString.prototype._getWkbSize = function() {\n    var size = 1 + 4 + 4;\n    for(var i = 0; i < this.lineStrings.length; i++)size += this.lineStrings[i]._getWkbSize();\n    return size;\n};\nMultiLineString.prototype.toGeoJSON = function(options) {\n    var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);\n    geoJSON.type = Types.geoJSON.MultiLineString;\n    geoJSON.coordinates = [];\n    for(var i = 0; i < this.lineStrings.length; i++)geoJSON.coordinates.push(this.lineStrings[i].toGeoJSON().coordinates);\n    return geoJSON;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/wkx/lib/multilinestring.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/wkx/lib/multipoint.js":
/*!********************************************!*\
  !*** ./node_modules/wkx/lib/multipoint.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = MultiPoint;\nvar util = __webpack_require__(/*! util */ \"util\");\nvar Types = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/wkx/lib/types.js\");\nvar Geometry = __webpack_require__(/*! ./geometry */ \"(rsc)/./node_modules/wkx/lib/geometry.js\");\nvar Point = __webpack_require__(/*! ./point */ \"(rsc)/./node_modules/wkx/lib/point.js\");\nvar BinaryWriter = __webpack_require__(/*! ./binarywriter */ \"(rsc)/./node_modules/wkx/lib/binarywriter.js\");\nfunction MultiPoint(points, srid) {\n    Geometry.call(this);\n    this.points = points || [];\n    this.srid = srid;\n    if (this.points.length > 0) {\n        this.hasZ = this.points[0].hasZ;\n        this.hasM = this.points[0].hasM;\n    }\n}\nutil.inherits(MultiPoint, Geometry);\nMultiPoint.Z = function(points, srid) {\n    var multiPoint = new MultiPoint(points, srid);\n    multiPoint.hasZ = true;\n    return multiPoint;\n};\nMultiPoint.M = function(points, srid) {\n    var multiPoint = new MultiPoint(points, srid);\n    multiPoint.hasM = true;\n    return multiPoint;\n};\nMultiPoint.ZM = function(points, srid) {\n    var multiPoint = new MultiPoint(points, srid);\n    multiPoint.hasZ = true;\n    multiPoint.hasM = true;\n    return multiPoint;\n};\nMultiPoint._parseWkt = function(value, options) {\n    var multiPoint = new MultiPoint();\n    multiPoint.srid = options.srid;\n    multiPoint.hasZ = options.hasZ;\n    multiPoint.hasM = options.hasM;\n    if (value.isMatch([\n        \"EMPTY\"\n    ])) return multiPoint;\n    value.expectGroupStart();\n    multiPoint.points.push.apply(multiPoint.points, value.matchCoordinates(options));\n    value.expectGroupEnd();\n    return multiPoint;\n};\nMultiPoint._parseWkb = function(value, options) {\n    var multiPoint = new MultiPoint();\n    multiPoint.srid = options.srid;\n    multiPoint.hasZ = options.hasZ;\n    multiPoint.hasM = options.hasM;\n    var pointCount = value.readUInt32();\n    for(var i = 0; i < pointCount; i++)multiPoint.points.push(Geometry.parse(value, options));\n    return multiPoint;\n};\nMultiPoint._parseTwkb = function(value, options) {\n    var multiPoint = new MultiPoint();\n    multiPoint.hasZ = options.hasZ;\n    multiPoint.hasM = options.hasM;\n    if (options.isEmpty) return multiPoint;\n    var previousPoint = new Point(0, 0, options.hasZ ? 0 : undefined, options.hasM ? 0 : undefined);\n    var pointCount = value.readVarInt();\n    for(var i = 0; i < pointCount; i++)multiPoint.points.push(Point._readTwkbPoint(value, options, previousPoint));\n    return multiPoint;\n};\nMultiPoint._parseGeoJSON = function(value) {\n    var multiPoint = new MultiPoint();\n    if (value.coordinates.length > 0) multiPoint.hasZ = value.coordinates[0].length > 2;\n    for(var i = 0; i < value.coordinates.length; i++)multiPoint.points.push(Point._parseGeoJSON({\n        coordinates: value.coordinates[i]\n    }));\n    return multiPoint;\n};\nMultiPoint.prototype.toWkt = function() {\n    if (this.points.length === 0) return this._getWktType(Types.wkt.MultiPoint, true);\n    var wkt = this._getWktType(Types.wkt.MultiPoint, false) + \"(\";\n    for(var i = 0; i < this.points.length; i++)wkt += this._getWktCoordinate(this.points[i]) + \",\";\n    wkt = wkt.slice(0, -1);\n    wkt += \")\";\n    return wkt;\n};\nMultiPoint.prototype.toWkb = function() {\n    var wkb = new BinaryWriter(this._getWkbSize());\n    wkb.writeInt8(1);\n    this._writeWkbType(wkb, Types.wkb.MultiPoint);\n    wkb.writeUInt32LE(this.points.length);\n    for(var i = 0; i < this.points.length; i++)wkb.writeBuffer(this.points[i].toWkb({\n        srid: this.srid\n    }));\n    return wkb.buffer;\n};\nMultiPoint.prototype.toTwkb = function() {\n    var twkb = new BinaryWriter(0, true);\n    var precision = Geometry.getTwkbPrecision(5, 0, 0);\n    var isEmpty = this.points.length === 0;\n    this._writeTwkbHeader(twkb, Types.wkb.MultiPoint, precision, isEmpty);\n    if (this.points.length > 0) {\n        twkb.writeVarInt(this.points.length);\n        var previousPoint = new Point(0, 0, 0, 0);\n        for(var i = 0; i < this.points.length; i++)this.points[i]._writeTwkbPoint(twkb, precision, previousPoint);\n    }\n    return twkb.buffer;\n};\nMultiPoint.prototype._getWkbSize = function() {\n    var coordinateSize = 16;\n    if (this.hasZ) coordinateSize += 8;\n    if (this.hasM) coordinateSize += 8;\n    coordinateSize += 5;\n    return 1 + 4 + 4 + this.points.length * coordinateSize;\n};\nMultiPoint.prototype.toGeoJSON = function(options) {\n    var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);\n    geoJSON.type = Types.geoJSON.MultiPoint;\n    geoJSON.coordinates = [];\n    for(var i = 0; i < this.points.length; i++)geoJSON.coordinates.push(this.points[i].toGeoJSON().coordinates);\n    return geoJSON;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/wkx/lib/multipoint.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/wkx/lib/multipolygon.js":
/*!**********************************************!*\
  !*** ./node_modules/wkx/lib/multipolygon.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = MultiPolygon;\nvar util = __webpack_require__(/*! util */ \"util\");\nvar Types = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/wkx/lib/types.js\");\nvar Geometry = __webpack_require__(/*! ./geometry */ \"(rsc)/./node_modules/wkx/lib/geometry.js\");\nvar Point = __webpack_require__(/*! ./point */ \"(rsc)/./node_modules/wkx/lib/point.js\");\nvar Polygon = __webpack_require__(/*! ./polygon */ \"(rsc)/./node_modules/wkx/lib/polygon.js\");\nvar BinaryWriter = __webpack_require__(/*! ./binarywriter */ \"(rsc)/./node_modules/wkx/lib/binarywriter.js\");\nfunction MultiPolygon(polygons, srid) {\n    Geometry.call(this);\n    this.polygons = polygons || [];\n    this.srid = srid;\n    if (this.polygons.length > 0) {\n        this.hasZ = this.polygons[0].hasZ;\n        this.hasM = this.polygons[0].hasM;\n    }\n}\nutil.inherits(MultiPolygon, Geometry);\nMultiPolygon.Z = function(polygons, srid) {\n    var multiPolygon = new MultiPolygon(polygons, srid);\n    multiPolygon.hasZ = true;\n    return multiPolygon;\n};\nMultiPolygon.M = function(polygons, srid) {\n    var multiPolygon = new MultiPolygon(polygons, srid);\n    multiPolygon.hasM = true;\n    return multiPolygon;\n};\nMultiPolygon.ZM = function(polygons, srid) {\n    var multiPolygon = new MultiPolygon(polygons, srid);\n    multiPolygon.hasZ = true;\n    multiPolygon.hasM = true;\n    return multiPolygon;\n};\nMultiPolygon._parseWkt = function(value, options) {\n    var multiPolygon = new MultiPolygon();\n    multiPolygon.srid = options.srid;\n    multiPolygon.hasZ = options.hasZ;\n    multiPolygon.hasM = options.hasM;\n    if (value.isMatch([\n        \"EMPTY\"\n    ])) return multiPolygon;\n    value.expectGroupStart();\n    do {\n        value.expectGroupStart();\n        var exteriorRing = [];\n        var interiorRings = [];\n        value.expectGroupStart();\n        exteriorRing.push.apply(exteriorRing, value.matchCoordinates(options));\n        value.expectGroupEnd();\n        while(value.isMatch([\n            \",\"\n        ])){\n            value.expectGroupStart();\n            interiorRings.push(value.matchCoordinates(options));\n            value.expectGroupEnd();\n        }\n        multiPolygon.polygons.push(new Polygon(exteriorRing, interiorRings));\n        value.expectGroupEnd();\n    }while (value.isMatch([\n        \",\"\n    ]));\n    value.expectGroupEnd();\n    return multiPolygon;\n};\nMultiPolygon._parseWkb = function(value, options) {\n    var multiPolygon = new MultiPolygon();\n    multiPolygon.srid = options.srid;\n    multiPolygon.hasZ = options.hasZ;\n    multiPolygon.hasM = options.hasM;\n    var polygonCount = value.readUInt32();\n    for(var i = 0; i < polygonCount; i++)multiPolygon.polygons.push(Geometry.parse(value, options));\n    return multiPolygon;\n};\nMultiPolygon._parseTwkb = function(value, options) {\n    var multiPolygon = new MultiPolygon();\n    multiPolygon.hasZ = options.hasZ;\n    multiPolygon.hasM = options.hasM;\n    if (options.isEmpty) return multiPolygon;\n    var previousPoint = new Point(0, 0, options.hasZ ? 0 : undefined, options.hasM ? 0 : undefined);\n    var polygonCount = value.readVarInt();\n    for(var i = 0; i < polygonCount; i++){\n        var polygon = new Polygon();\n        polygon.hasZ = options.hasZ;\n        polygon.hasM = options.hasM;\n        var ringCount = value.readVarInt();\n        var exteriorRingCount = value.readVarInt();\n        for(var j = 0; j < exteriorRingCount; j++)polygon.exteriorRing.push(Point._readTwkbPoint(value, options, previousPoint));\n        for(j = 1; j < ringCount; j++){\n            var interiorRing = [];\n            var interiorRingCount = value.readVarInt();\n            for(var k = 0; k < interiorRingCount; k++)interiorRing.push(Point._readTwkbPoint(value, options, previousPoint));\n            polygon.interiorRings.push(interiorRing);\n        }\n        multiPolygon.polygons.push(polygon);\n    }\n    return multiPolygon;\n};\nMultiPolygon._parseGeoJSON = function(value) {\n    var multiPolygon = new MultiPolygon();\n    if (value.coordinates.length > 0 && value.coordinates[0].length > 0 && value.coordinates[0][0].length > 0) multiPolygon.hasZ = value.coordinates[0][0][0].length > 2;\n    for(var i = 0; i < value.coordinates.length; i++)multiPolygon.polygons.push(Polygon._parseGeoJSON({\n        coordinates: value.coordinates[i]\n    }));\n    return multiPolygon;\n};\nMultiPolygon.prototype.toWkt = function() {\n    if (this.polygons.length === 0) return this._getWktType(Types.wkt.MultiPolygon, true);\n    var wkt = this._getWktType(Types.wkt.MultiPolygon, false) + \"(\";\n    for(var i = 0; i < this.polygons.length; i++)wkt += this.polygons[i]._toInnerWkt() + \",\";\n    wkt = wkt.slice(0, -1);\n    wkt += \")\";\n    return wkt;\n};\nMultiPolygon.prototype.toWkb = function() {\n    var wkb = new BinaryWriter(this._getWkbSize());\n    wkb.writeInt8(1);\n    this._writeWkbType(wkb, Types.wkb.MultiPolygon);\n    wkb.writeUInt32LE(this.polygons.length);\n    for(var i = 0; i < this.polygons.length; i++)wkb.writeBuffer(this.polygons[i].toWkb({\n        srid: this.srid\n    }));\n    return wkb.buffer;\n};\nMultiPolygon.prototype.toTwkb = function() {\n    var twkb = new BinaryWriter(0, true);\n    var precision = Geometry.getTwkbPrecision(5, 0, 0);\n    var isEmpty = this.polygons.length === 0;\n    this._writeTwkbHeader(twkb, Types.wkb.MultiPolygon, precision, isEmpty);\n    if (this.polygons.length > 0) {\n        twkb.writeVarInt(this.polygons.length);\n        var previousPoint = new Point(0, 0, 0, 0);\n        for(var i = 0; i < this.polygons.length; i++){\n            twkb.writeVarInt(1 + this.polygons[i].interiorRings.length);\n            twkb.writeVarInt(this.polygons[i].exteriorRing.length);\n            for(var j = 0; j < this.polygons[i].exteriorRing.length; j++)this.polygons[i].exteriorRing[j]._writeTwkbPoint(twkb, precision, previousPoint);\n            for(j = 0; j < this.polygons[i].interiorRings.length; j++){\n                twkb.writeVarInt(this.polygons[i].interiorRings[j].length);\n                for(var k = 0; k < this.polygons[i].interiorRings[j].length; k++)this.polygons[i].interiorRings[j][k]._writeTwkbPoint(twkb, precision, previousPoint);\n            }\n        }\n    }\n    return twkb.buffer;\n};\nMultiPolygon.prototype._getWkbSize = function() {\n    var size = 1 + 4 + 4;\n    for(var i = 0; i < this.polygons.length; i++)size += this.polygons[i]._getWkbSize();\n    return size;\n};\nMultiPolygon.prototype.toGeoJSON = function(options) {\n    var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);\n    geoJSON.type = Types.geoJSON.MultiPolygon;\n    geoJSON.coordinates = [];\n    for(var i = 0; i < this.polygons.length; i++)geoJSON.coordinates.push(this.polygons[i].toGeoJSON().coordinates);\n    return geoJSON;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/wkx/lib/multipolygon.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/wkx/lib/point.js":
/*!***************************************!*\
  !*** ./node_modules/wkx/lib/point.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = Point;\nvar util = __webpack_require__(/*! util */ \"util\");\nvar Geometry = __webpack_require__(/*! ./geometry */ \"(rsc)/./node_modules/wkx/lib/geometry.js\");\nvar Types = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/wkx/lib/types.js\");\nvar BinaryWriter = __webpack_require__(/*! ./binarywriter */ \"(rsc)/./node_modules/wkx/lib/binarywriter.js\");\nvar ZigZag = __webpack_require__(/*! ./zigzag.js */ \"(rsc)/./node_modules/wkx/lib/zigzag.js\");\nfunction Point(x, y, z, m, srid) {\n    Geometry.call(this);\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.m = m;\n    this.srid = srid;\n    this.hasZ = typeof this.z !== \"undefined\";\n    this.hasM = typeof this.m !== \"undefined\";\n}\nutil.inherits(Point, Geometry);\nPoint.Z = function(x, y, z, srid) {\n    var point = new Point(x, y, z, undefined, srid);\n    point.hasZ = true;\n    return point;\n};\nPoint.M = function(x, y, m, srid) {\n    var point = new Point(x, y, undefined, m, srid);\n    point.hasM = true;\n    return point;\n};\nPoint.ZM = function(x, y, z, m, srid) {\n    var point = new Point(x, y, z, m, srid);\n    point.hasZ = true;\n    point.hasM = true;\n    return point;\n};\nPoint._parseWkt = function(value, options) {\n    var point = new Point();\n    point.srid = options.srid;\n    point.hasZ = options.hasZ;\n    point.hasM = options.hasM;\n    if (value.isMatch([\n        \"EMPTY\"\n    ])) return point;\n    value.expectGroupStart();\n    var coordinate = value.matchCoordinate(options);\n    point.x = coordinate.x;\n    point.y = coordinate.y;\n    point.z = coordinate.z;\n    point.m = coordinate.m;\n    value.expectGroupEnd();\n    return point;\n};\nPoint._parseWkb = function(value, options) {\n    var point = Point._readWkbPoint(value, options);\n    point.srid = options.srid;\n    return point;\n};\nPoint._readWkbPoint = function(value, options) {\n    return new Point(value.readDouble(), value.readDouble(), options.hasZ ? value.readDouble() : undefined, options.hasM ? value.readDouble() : undefined);\n};\nPoint._parseTwkb = function(value, options) {\n    var point = new Point();\n    point.hasZ = options.hasZ;\n    point.hasM = options.hasM;\n    if (options.isEmpty) return point;\n    point.x = ZigZag.decode(value.readVarInt()) / options.precisionFactor;\n    point.y = ZigZag.decode(value.readVarInt()) / options.precisionFactor;\n    point.z = options.hasZ ? ZigZag.decode(value.readVarInt()) / options.zPrecisionFactor : undefined;\n    point.m = options.hasM ? ZigZag.decode(value.readVarInt()) / options.mPrecisionFactor : undefined;\n    return point;\n};\nPoint._readTwkbPoint = function(value, options, previousPoint) {\n    previousPoint.x += ZigZag.decode(value.readVarInt()) / options.precisionFactor;\n    previousPoint.y += ZigZag.decode(value.readVarInt()) / options.precisionFactor;\n    if (options.hasZ) previousPoint.z += ZigZag.decode(value.readVarInt()) / options.zPrecisionFactor;\n    if (options.hasM) previousPoint.m += ZigZag.decode(value.readVarInt()) / options.mPrecisionFactor;\n    return new Point(previousPoint.x, previousPoint.y, previousPoint.z, previousPoint.m);\n};\nPoint._parseGeoJSON = function(value) {\n    return Point._readGeoJSONPoint(value.coordinates);\n};\nPoint._readGeoJSONPoint = function(coordinates) {\n    if (coordinates.length === 0) return new Point();\n    if (coordinates.length > 2) return new Point(coordinates[0], coordinates[1], coordinates[2]);\n    return new Point(coordinates[0], coordinates[1]);\n};\nPoint.prototype.toWkt = function() {\n    if (typeof this.x === \"undefined\" && typeof this.y === \"undefined\" && typeof this.z === \"undefined\" && typeof this.m === \"undefined\") return this._getWktType(Types.wkt.Point, true);\n    return this._getWktType(Types.wkt.Point, false) + \"(\" + this._getWktCoordinate(this) + \")\";\n};\nPoint.prototype.toWkb = function(parentOptions) {\n    var wkb = new BinaryWriter(this._getWkbSize());\n    wkb.writeInt8(1);\n    this._writeWkbType(wkb, Types.wkb.Point, parentOptions);\n    if (typeof this.x === \"undefined\" && typeof this.y === \"undefined\") {\n        wkb.writeDoubleLE(NaN);\n        wkb.writeDoubleLE(NaN);\n        if (this.hasZ) wkb.writeDoubleLE(NaN);\n        if (this.hasM) wkb.writeDoubleLE(NaN);\n    } else {\n        this._writeWkbPoint(wkb);\n    }\n    return wkb.buffer;\n};\nPoint.prototype._writeWkbPoint = function(wkb) {\n    wkb.writeDoubleLE(this.x);\n    wkb.writeDoubleLE(this.y);\n    if (this.hasZ) wkb.writeDoubleLE(this.z);\n    if (this.hasM) wkb.writeDoubleLE(this.m);\n};\nPoint.prototype.toTwkb = function() {\n    var twkb = new BinaryWriter(0, true);\n    var precision = Geometry.getTwkbPrecision(5, 0, 0);\n    var isEmpty = typeof this.x === \"undefined\" && typeof this.y === \"undefined\";\n    this._writeTwkbHeader(twkb, Types.wkb.Point, precision, isEmpty);\n    if (!isEmpty) this._writeTwkbPoint(twkb, precision, new Point(0, 0, 0, 0));\n    return twkb.buffer;\n};\nPoint.prototype._writeTwkbPoint = function(twkb, precision, previousPoint) {\n    var x = this.x * precision.xyFactor;\n    var y = this.y * precision.xyFactor;\n    var z = this.z * precision.zFactor;\n    var m = this.m * precision.mFactor;\n    twkb.writeVarInt(ZigZag.encode(x - previousPoint.x));\n    twkb.writeVarInt(ZigZag.encode(y - previousPoint.y));\n    if (this.hasZ) twkb.writeVarInt(ZigZag.encode(z - previousPoint.z));\n    if (this.hasM) twkb.writeVarInt(ZigZag.encode(m - previousPoint.m));\n    previousPoint.x = x;\n    previousPoint.y = y;\n    previousPoint.z = z;\n    previousPoint.m = m;\n};\nPoint.prototype._getWkbSize = function() {\n    var size = 1 + 4 + 8 + 8;\n    if (this.hasZ) size += 8;\n    if (this.hasM) size += 8;\n    return size;\n};\nPoint.prototype.toGeoJSON = function(options) {\n    var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);\n    geoJSON.type = Types.geoJSON.Point;\n    if (typeof this.x === \"undefined\" && typeof this.y === \"undefined\") geoJSON.coordinates = [];\n    else if (typeof this.z !== \"undefined\") geoJSON.coordinates = [\n        this.x,\n        this.y,\n        this.z\n    ];\n    else geoJSON.coordinates = [\n        this.x,\n        this.y\n    ];\n    return geoJSON;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/wkx/lib/point.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/wkx/lib/polygon.js":
/*!*****************************************!*\
  !*** ./node_modules/wkx/lib/polygon.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = Polygon;\nvar util = __webpack_require__(/*! util */ \"util\");\nvar Geometry = __webpack_require__(/*! ./geometry */ \"(rsc)/./node_modules/wkx/lib/geometry.js\");\nvar Types = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/wkx/lib/types.js\");\nvar Point = __webpack_require__(/*! ./point */ \"(rsc)/./node_modules/wkx/lib/point.js\");\nvar BinaryWriter = __webpack_require__(/*! ./binarywriter */ \"(rsc)/./node_modules/wkx/lib/binarywriter.js\");\nfunction Polygon(exteriorRing, interiorRings, srid) {\n    Geometry.call(this);\n    this.exteriorRing = exteriorRing || [];\n    this.interiorRings = interiorRings || [];\n    this.srid = srid;\n    if (this.exteriorRing.length > 0) {\n        this.hasZ = this.exteriorRing[0].hasZ;\n        this.hasM = this.exteriorRing[0].hasM;\n    }\n}\nutil.inherits(Polygon, Geometry);\nPolygon.Z = function(exteriorRing, interiorRings, srid) {\n    var polygon = new Polygon(exteriorRing, interiorRings, srid);\n    polygon.hasZ = true;\n    return polygon;\n};\nPolygon.M = function(exteriorRing, interiorRings, srid) {\n    var polygon = new Polygon(exteriorRing, interiorRings, srid);\n    polygon.hasM = true;\n    return polygon;\n};\nPolygon.ZM = function(exteriorRing, interiorRings, srid) {\n    var polygon = new Polygon(exteriorRing, interiorRings, srid);\n    polygon.hasZ = true;\n    polygon.hasM = true;\n    return polygon;\n};\nPolygon._parseWkt = function(value, options) {\n    var polygon = new Polygon();\n    polygon.srid = options.srid;\n    polygon.hasZ = options.hasZ;\n    polygon.hasM = options.hasM;\n    if (value.isMatch([\n        \"EMPTY\"\n    ])) return polygon;\n    value.expectGroupStart();\n    value.expectGroupStart();\n    polygon.exteriorRing.push.apply(polygon.exteriorRing, value.matchCoordinates(options));\n    value.expectGroupEnd();\n    while(value.isMatch([\n        \",\"\n    ])){\n        value.expectGroupStart();\n        polygon.interiorRings.push(value.matchCoordinates(options));\n        value.expectGroupEnd();\n    }\n    value.expectGroupEnd();\n    return polygon;\n};\nPolygon._parseWkb = function(value, options) {\n    var polygon = new Polygon();\n    polygon.srid = options.srid;\n    polygon.hasZ = options.hasZ;\n    polygon.hasM = options.hasM;\n    var ringCount = value.readUInt32();\n    if (ringCount > 0) {\n        var exteriorRingCount = value.readUInt32();\n        for(var i = 0; i < exteriorRingCount; i++)polygon.exteriorRing.push(Point._readWkbPoint(value, options));\n        for(i = 1; i < ringCount; i++){\n            var interiorRing = [];\n            var interiorRingCount = value.readUInt32();\n            for(var j = 0; j < interiorRingCount; j++)interiorRing.push(Point._readWkbPoint(value, options));\n            polygon.interiorRings.push(interiorRing);\n        }\n    }\n    return polygon;\n};\nPolygon._parseTwkb = function(value, options) {\n    var polygon = new Polygon();\n    polygon.hasZ = options.hasZ;\n    polygon.hasM = options.hasM;\n    if (options.isEmpty) return polygon;\n    var previousPoint = new Point(0, 0, options.hasZ ? 0 : undefined, options.hasM ? 0 : undefined);\n    var ringCount = value.readVarInt();\n    var exteriorRingCount = value.readVarInt();\n    for(var i = 0; i < exteriorRingCount; i++)polygon.exteriorRing.push(Point._readTwkbPoint(value, options, previousPoint));\n    for(i = 1; i < ringCount; i++){\n        var interiorRing = [];\n        var interiorRingCount = value.readVarInt();\n        for(var j = 0; j < interiorRingCount; j++)interiorRing.push(Point._readTwkbPoint(value, options, previousPoint));\n        polygon.interiorRings.push(interiorRing);\n    }\n    return polygon;\n};\nPolygon._parseGeoJSON = function(value) {\n    var polygon = new Polygon();\n    if (value.coordinates.length > 0 && value.coordinates[0].length > 0) polygon.hasZ = value.coordinates[0][0].length > 2;\n    for(var i = 0; i < value.coordinates.length; i++){\n        if (i > 0) polygon.interiorRings.push([]);\n        for(var j = 0; j < value.coordinates[i].length; j++){\n            if (i === 0) polygon.exteriorRing.push(Point._readGeoJSONPoint(value.coordinates[i][j]));\n            else polygon.interiorRings[i - 1].push(Point._readGeoJSONPoint(value.coordinates[i][j]));\n        }\n    }\n    return polygon;\n};\nPolygon.prototype.toWkt = function() {\n    if (this.exteriorRing.length === 0) return this._getWktType(Types.wkt.Polygon, true);\n    return this._getWktType(Types.wkt.Polygon, false) + this._toInnerWkt();\n};\nPolygon.prototype._toInnerWkt = function() {\n    var innerWkt = \"((\";\n    for(var i = 0; i < this.exteriorRing.length; i++)innerWkt += this._getWktCoordinate(this.exteriorRing[i]) + \",\";\n    innerWkt = innerWkt.slice(0, -1);\n    innerWkt += \")\";\n    for(i = 0; i < this.interiorRings.length; i++){\n        innerWkt += \",(\";\n        for(var j = 0; j < this.interiorRings[i].length; j++){\n            innerWkt += this._getWktCoordinate(this.interiorRings[i][j]) + \",\";\n        }\n        innerWkt = innerWkt.slice(0, -1);\n        innerWkt += \")\";\n    }\n    innerWkt += \")\";\n    return innerWkt;\n};\nPolygon.prototype.toWkb = function(parentOptions) {\n    var wkb = new BinaryWriter(this._getWkbSize());\n    wkb.writeInt8(1);\n    this._writeWkbType(wkb, Types.wkb.Polygon, parentOptions);\n    if (this.exteriorRing.length > 0) {\n        wkb.writeUInt32LE(1 + this.interiorRings.length);\n        wkb.writeUInt32LE(this.exteriorRing.length);\n    } else {\n        wkb.writeUInt32LE(0);\n    }\n    for(var i = 0; i < this.exteriorRing.length; i++)this.exteriorRing[i]._writeWkbPoint(wkb);\n    for(i = 0; i < this.interiorRings.length; i++){\n        wkb.writeUInt32LE(this.interiorRings[i].length);\n        for(var j = 0; j < this.interiorRings[i].length; j++)this.interiorRings[i][j]._writeWkbPoint(wkb);\n    }\n    return wkb.buffer;\n};\nPolygon.prototype.toTwkb = function() {\n    var twkb = new BinaryWriter(0, true);\n    var precision = Geometry.getTwkbPrecision(5, 0, 0);\n    var isEmpty = this.exteriorRing.length === 0;\n    this._writeTwkbHeader(twkb, Types.wkb.Polygon, precision, isEmpty);\n    if (this.exteriorRing.length > 0) {\n        twkb.writeVarInt(1 + this.interiorRings.length);\n        twkb.writeVarInt(this.exteriorRing.length);\n        var previousPoint = new Point(0, 0, 0, 0);\n        for(var i = 0; i < this.exteriorRing.length; i++)this.exteriorRing[i]._writeTwkbPoint(twkb, precision, previousPoint);\n        for(i = 0; i < this.interiorRings.length; i++){\n            twkb.writeVarInt(this.interiorRings[i].length);\n            for(var j = 0; j < this.interiorRings[i].length; j++)this.interiorRings[i][j]._writeTwkbPoint(twkb, precision, previousPoint);\n        }\n    }\n    return twkb.buffer;\n};\nPolygon.prototype._getWkbSize = function() {\n    var coordinateSize = 16;\n    if (this.hasZ) coordinateSize += 8;\n    if (this.hasM) coordinateSize += 8;\n    var size = 1 + 4 + 4;\n    if (this.exteriorRing.length > 0) size += 4 + this.exteriorRing.length * coordinateSize;\n    for(var i = 0; i < this.interiorRings.length; i++)size += 4 + this.interiorRings[i].length * coordinateSize;\n    return size;\n};\nPolygon.prototype.toGeoJSON = function(options) {\n    var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);\n    geoJSON.type = Types.geoJSON.Polygon;\n    geoJSON.coordinates = [];\n    if (this.exteriorRing.length > 0) {\n        var exteriorRing = [];\n        for(var i = 0; i < this.exteriorRing.length; i++){\n            if (this.hasZ) exteriorRing.push([\n                this.exteriorRing[i].x,\n                this.exteriorRing[i].y,\n                this.exteriorRing[i].z\n            ]);\n            else exteriorRing.push([\n                this.exteriorRing[i].x,\n                this.exteriorRing[i].y\n            ]);\n        }\n        geoJSON.coordinates.push(exteriorRing);\n    }\n    for(var j = 0; j < this.interiorRings.length; j++){\n        var interiorRing = [];\n        for(var k = 0; k < this.interiorRings[j].length; k++){\n            if (this.hasZ) interiorRing.push([\n                this.interiorRings[j][k].x,\n                this.interiorRings[j][k].y,\n                this.interiorRings[j][k].z\n            ]);\n            else interiorRing.push([\n                this.interiorRings[j][k].x,\n                this.interiorRings[j][k].y\n            ]);\n        }\n        geoJSON.coordinates.push(interiorRing);\n    }\n    return geoJSON;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/wkx/lib/polygon.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/wkx/lib/types.js":
/*!***************************************!*\
  !*** ./node_modules/wkx/lib/types.js ***!
  \***************************************/
/***/ ((module) => {

eval("module.exports = {\n    wkt: {\n        Point: \"POINT\",\n        LineString: \"LINESTRING\",\n        Polygon: \"POLYGON\",\n        MultiPoint: \"MULTIPOINT\",\n        MultiLineString: \"MULTILINESTRING\",\n        MultiPolygon: \"MULTIPOLYGON\",\n        GeometryCollection: \"GEOMETRYCOLLECTION\"\n    },\n    wkb: {\n        Point: 1,\n        LineString: 2,\n        Polygon: 3,\n        MultiPoint: 4,\n        MultiLineString: 5,\n        MultiPolygon: 6,\n        GeometryCollection: 7\n    },\n    geoJSON: {\n        Point: \"Point\",\n        LineString: \"LineString\",\n        Polygon: \"Polygon\",\n        MultiPoint: \"MultiPoint\",\n        MultiLineString: \"MultiLineString\",\n        MultiPolygon: \"MultiPolygon\",\n        GeometryCollection: \"GeometryCollection\"\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbWktc3VwZXItYXBwLy4vbm9kZV9tb2R1bGVzL3dreC9saWIvdHlwZXMuanM/NTRkYSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIHdrdDoge1xyXG4gICAgICAgIFBvaW50OiAnUE9JTlQnLFxyXG4gICAgICAgIExpbmVTdHJpbmc6ICdMSU5FU1RSSU5HJyxcclxuICAgICAgICBQb2x5Z29uOiAnUE9MWUdPTicsXHJcbiAgICAgICAgTXVsdGlQb2ludDogJ01VTFRJUE9JTlQnLFxyXG4gICAgICAgIE11bHRpTGluZVN0cmluZzogJ01VTFRJTElORVNUUklORycsXHJcbiAgICAgICAgTXVsdGlQb2x5Z29uOiAnTVVMVElQT0xZR09OJyxcclxuICAgICAgICBHZW9tZXRyeUNvbGxlY3Rpb246ICdHRU9NRVRSWUNPTExFQ1RJT04nXHJcbiAgICB9LFxyXG4gICAgd2tiOiB7XHJcbiAgICAgICAgUG9pbnQ6IDEsXHJcbiAgICAgICAgTGluZVN0cmluZzogMixcclxuICAgICAgICBQb2x5Z29uOiAzLFxyXG4gICAgICAgIE11bHRpUG9pbnQ6IDQsXHJcbiAgICAgICAgTXVsdGlMaW5lU3RyaW5nOiA1LFxyXG4gICAgICAgIE11bHRpUG9seWdvbjogNixcclxuICAgICAgICBHZW9tZXRyeUNvbGxlY3Rpb246IDdcclxuICAgIH0sXHJcbiAgICBnZW9KU09OOiB7XHJcbiAgICAgICAgUG9pbnQ6ICdQb2ludCcsXHJcbiAgICAgICAgTGluZVN0cmluZzogJ0xpbmVTdHJpbmcnLFxyXG4gICAgICAgIFBvbHlnb246ICdQb2x5Z29uJyxcclxuICAgICAgICBNdWx0aVBvaW50OiAnTXVsdGlQb2ludCcsXHJcbiAgICAgICAgTXVsdGlMaW5lU3RyaW5nOiAnTXVsdGlMaW5lU3RyaW5nJyxcclxuICAgICAgICBNdWx0aVBvbHlnb246ICdNdWx0aVBvbHlnb24nLFxyXG4gICAgICAgIEdlb21ldHJ5Q29sbGVjdGlvbjogJ0dlb21ldHJ5Q29sbGVjdGlvbidcclxuICAgIH1cclxufTtcclxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ3a3QiLCJQb2ludCIsIkxpbmVTdHJpbmciLCJQb2x5Z29uIiwiTXVsdGlQb2ludCIsIk11bHRpTGluZVN0cmluZyIsIk11bHRpUG9seWdvbiIsIkdlb21ldHJ5Q29sbGVjdGlvbiIsIndrYiIsImdlb0pTT04iXSwibWFwcGluZ3MiOiJBQUFBQSxPQUFPQyxPQUFPLEdBQUc7SUFDYkMsS0FBSztRQUNEQyxPQUFPO1FBQ1BDLFlBQVk7UUFDWkMsU0FBUztRQUNUQyxZQUFZO1FBQ1pDLGlCQUFpQjtRQUNqQkMsY0FBYztRQUNkQyxvQkFBb0I7SUFDeEI7SUFDQUMsS0FBSztRQUNEUCxPQUFPO1FBQ1BDLFlBQVk7UUFDWkMsU0FBUztRQUNUQyxZQUFZO1FBQ1pDLGlCQUFpQjtRQUNqQkMsY0FBYztRQUNkQyxvQkFBb0I7SUFDeEI7SUFDQUUsU0FBUztRQUNMUixPQUFPO1FBQ1BDLFlBQVk7UUFDWkMsU0FBUztRQUNUQyxZQUFZO1FBQ1pDLGlCQUFpQjtRQUNqQkMsY0FBYztRQUNkQyxvQkFBb0I7SUFDeEI7QUFDSiIsImZpbGUiOiIocnNjKS8uL25vZGVfbW9kdWxlcy93a3gvbGliL3R5cGVzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/wkx/lib/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/wkx/lib/wktparser.js":
/*!*******************************************!*\
  !*** ./node_modules/wkx/lib/wktparser.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = WktParser;\nvar Types = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/wkx/lib/types.js\");\nvar Point = __webpack_require__(/*! ./point */ \"(rsc)/./node_modules/wkx/lib/point.js\");\nfunction WktParser(value) {\n    this.value = value;\n    this.position = 0;\n}\nWktParser.prototype.match = function(tokens) {\n    this.skipWhitespaces();\n    for(var i = 0; i < tokens.length; i++){\n        if (this.value.substring(this.position).indexOf(tokens[i]) === 0) {\n            this.position += tokens[i].length;\n            return tokens[i];\n        }\n    }\n    return null;\n};\nWktParser.prototype.matchRegex = function(tokens) {\n    this.skipWhitespaces();\n    for(var i = 0; i < tokens.length; i++){\n        var match = this.value.substring(this.position).match(tokens[i]);\n        if (match) {\n            this.position += match[0].length;\n            return match;\n        }\n    }\n    return null;\n};\nWktParser.prototype.isMatch = function(tokens) {\n    this.skipWhitespaces();\n    for(var i = 0; i < tokens.length; i++){\n        if (this.value.substring(this.position).indexOf(tokens[i]) === 0) {\n            this.position += tokens[i].length;\n            return true;\n        }\n    }\n    return false;\n};\nWktParser.prototype.matchType = function() {\n    var geometryType = this.match([\n        Types.wkt.Point,\n        Types.wkt.LineString,\n        Types.wkt.Polygon,\n        Types.wkt.MultiPoint,\n        Types.wkt.MultiLineString,\n        Types.wkt.MultiPolygon,\n        Types.wkt.GeometryCollection\n    ]);\n    if (!geometryType) throw new Error(\"Expected geometry type\");\n    return geometryType;\n};\nWktParser.prototype.matchDimension = function() {\n    var dimension = this.match([\n        \"ZM\",\n        \"Z\",\n        \"M\"\n    ]);\n    switch(dimension){\n        case \"ZM\":\n            return {\n                hasZ: true,\n                hasM: true\n            };\n        case \"Z\":\n            return {\n                hasZ: true,\n                hasM: false\n            };\n        case \"M\":\n            return {\n                hasZ: false,\n                hasM: true\n            };\n        default:\n            return {\n                hasZ: false,\n                hasM: false\n            };\n    }\n};\nWktParser.prototype.expectGroupStart = function() {\n    if (!this.isMatch([\n        \"(\"\n    ])) throw new Error(\"Expected group start\");\n};\nWktParser.prototype.expectGroupEnd = function() {\n    if (!this.isMatch([\n        \")\"\n    ])) throw new Error(\"Expected group end\");\n};\nWktParser.prototype.matchCoordinate = function(options) {\n    var match;\n    if (options.hasZ && options.hasM) match = this.matchRegex([\n        /^(\\S*)\\s+(\\S*)\\s+(\\S*)\\s+([^\\s,)]*)/\n    ]);\n    else if (options.hasZ || options.hasM) match = this.matchRegex([\n        /^(\\S*)\\s+(\\S*)\\s+([^\\s,)]*)/\n    ]);\n    else match = this.matchRegex([\n        /^(\\S*)\\s+([^\\s,)]*)/\n    ]);\n    if (!match) throw new Error(\"Expected coordinates\");\n    if (options.hasZ && options.hasM) return new Point(parseFloat(match[1]), parseFloat(match[2]), parseFloat(match[3]), parseFloat(match[4]));\n    else if (options.hasZ) return new Point(parseFloat(match[1]), parseFloat(match[2]), parseFloat(match[3]));\n    else if (options.hasM) return new Point(parseFloat(match[1]), parseFloat(match[2]), undefined, parseFloat(match[3]));\n    else return new Point(parseFloat(match[1]), parseFloat(match[2]));\n};\nWktParser.prototype.matchCoordinates = function(options) {\n    var coordinates = [];\n    do {\n        var startsWithBracket = this.isMatch([\n            \"(\"\n        ]);\n        coordinates.push(this.matchCoordinate(options));\n        if (startsWithBracket) this.expectGroupEnd();\n    }while (this.isMatch([\n        \",\"\n    ]));\n    return coordinates;\n};\nWktParser.prototype.skipWhitespaces = function() {\n    while(this.position < this.value.length && this.value[this.position] === \" \")this.position++;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/wkx/lib/wktparser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/wkx/lib/wkx.js":
/*!*************************************!*\
  !*** ./node_modules/wkx/lib/wkx.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("exports.Types = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/wkx/lib/types.js\");\nexports.Geometry = __webpack_require__(/*! ./geometry */ \"(rsc)/./node_modules/wkx/lib/geometry.js\");\nexports.Point = __webpack_require__(/*! ./point */ \"(rsc)/./node_modules/wkx/lib/point.js\");\nexports.LineString = __webpack_require__(/*! ./linestring */ \"(rsc)/./node_modules/wkx/lib/linestring.js\");\nexports.Polygon = __webpack_require__(/*! ./polygon */ \"(rsc)/./node_modules/wkx/lib/polygon.js\");\nexports.MultiPoint = __webpack_require__(/*! ./multipoint */ \"(rsc)/./node_modules/wkx/lib/multipoint.js\");\nexports.MultiLineString = __webpack_require__(/*! ./multilinestring */ \"(rsc)/./node_modules/wkx/lib/multilinestring.js\");\nexports.MultiPolygon = __webpack_require__(/*! ./multipolygon */ \"(rsc)/./node_modules/wkx/lib/multipolygon.js\");\nexports.GeometryCollection = __webpack_require__(/*! ./geometrycollection */ \"(rsc)/./node_modules/wkx/lib/geometrycollection.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2t4L2xpYi93a3guanMiLCJtYXBwaW5ncyI6IkFBQUFBLDJGQUF3QjtBQUN4QkEsb0dBQTJCO0FBQzNCQSwyRkFBd0I7QUFDeEJBLDBHQUE2QjtBQUM3QkEsaUdBQTBCO0FBQzFCQSwwR0FBNkI7QUFDN0JBLHlIQUFrQztBQUNsQ0EsZ0hBQStCO0FBQy9CQSxrSUFBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbWktc3VwZXItYXBwLy4vbm9kZV9tb2R1bGVzL3dreC9saWIvd2t4LmpzPzQ1MzAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5UeXBlcyA9IHJlcXVpcmUoJy4vdHlwZXMnKTtcclxuZXhwb3J0cy5HZW9tZXRyeSA9IHJlcXVpcmUoJy4vZ2VvbWV0cnknKTtcclxuZXhwb3J0cy5Qb2ludCA9IHJlcXVpcmUoJy4vcG9pbnQnKTtcclxuZXhwb3J0cy5MaW5lU3RyaW5nID0gcmVxdWlyZSgnLi9saW5lc3RyaW5nJyk7XHJcbmV4cG9ydHMuUG9seWdvbiA9IHJlcXVpcmUoJy4vcG9seWdvbicpO1xyXG5leHBvcnRzLk11bHRpUG9pbnQgPSByZXF1aXJlKCcuL211bHRpcG9pbnQnKTtcclxuZXhwb3J0cy5NdWx0aUxpbmVTdHJpbmcgPSByZXF1aXJlKCcuL211bHRpbGluZXN0cmluZycpO1xyXG5leHBvcnRzLk11bHRpUG9seWdvbiA9IHJlcXVpcmUoJy4vbXVsdGlwb2x5Z29uJyk7XHJcbmV4cG9ydHMuR2VvbWV0cnlDb2xsZWN0aW9uID0gcmVxdWlyZSgnLi9nZW9tZXRyeWNvbGxlY3Rpb24nKTsiXSwibmFtZXMiOlsiZXhwb3J0cyIsIlR5cGVzIiwicmVxdWlyZSIsIkdlb21ldHJ5IiwiUG9pbnQiLCJMaW5lU3RyaW5nIiwiUG9seWdvbiIsIk11bHRpUG9pbnQiLCJNdWx0aUxpbmVTdHJpbmciLCJNdWx0aVBvbHlnb24iLCJHZW9tZXRyeUNvbGxlY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/wkx/lib/wkx.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/wkx/lib/zigzag.js":
/*!****************************************!*\
  !*** ./node_modules/wkx/lib/zigzag.js ***!
  \****************************************/
/***/ ((module) => {

eval("module.exports = {\n    encode: function(value) {\n        return value << 1 ^ value >> 31;\n    },\n    decode: function(value) {\n        return value >> 1 ^ -(value & 1);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbWktc3VwZXItYXBwLy4vbm9kZV9tb2R1bGVzL3dreC9saWIvemlnemFnLmpzPzg4OTMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBlbmNvZGU6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiAodmFsdWUgPDwgMSkgXiAodmFsdWUgPj4gMzEpO1xyXG4gICAgfSxcclxuICAgIGRlY29kZTogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuICh2YWx1ZSA+PiAxKSBeICgtKHZhbHVlICYgMSkpO1xyXG4gICAgfVxyXG59O1xyXG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImVuY29kZSIsInZhbHVlIiwiZGVjb2RlIl0sIm1hcHBpbmdzIjoiQUFBQUEsT0FBT0MsT0FBTyxHQUFHO0lBQ2JDLFFBQVEsU0FBVUMsS0FBSztRQUNuQixPQUFPLEFBQUNBLFNBQVMsSUFBTUEsU0FBUztJQUNwQztJQUNBQyxRQUFRLFNBQVVELEtBQUs7UUFDbkIsT0FBTyxBQUFDQSxTQUFTLElBQU0sQ0FBRUEsQ0FBQUEsUUFBUSxDQUFBO0lBQ3JDO0FBQ0oiLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2t4L2xpYi96aWd6YWcuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/wkx/lib/zigzag.js\n");

/***/ })

};
;